// üîç Validateur de Domaines SEO
// D√©tecte si un domaine est pr√©sent dans les bases de donn√©es SEO

export class DomainValidator {
    
    constructor(page) {
        this.page = page;
        this.errorMessages = [
            'No data available',
            'Domain not found',
            'Insufficient data',
            'Not enough data',
            'No data for this domain',
            'Domain not in database',
            'Data unavailable',
            'No traffic data',
            'Site not found',
            'No organic data',
            'Pas de donn√©es disponibles',
            'Domaine non trouv√©',
            'Donn√©es insuffisantes',
            'Aucune donn√©e'
        ];
    }

    /**
     * V√©rifie si un domaine est r√©pertori√© dans les bases SEO
     */
    async checkDomainInSEODatabase(domain, analyticsUrl) {
        console.log(`üîç V√©rification de ${domain} dans les bases SEO...`);
        
        try {
            // Aller sur la page d'analytics du domaine
            const response = await this.page.goto(analyticsUrl, { 
                waitUntil: 'domcontentloaded',
                timeout: 30000 
            });
            
            if (!response || !response.ok()) {
                return {
                    found: false,
                    reason: 'PAGE_INACCESSIBLE',
                    message: 'Impossible d\'acc√©der √† la page d\'analyse'
                };
            }

            // Attendre le chargement des donn√©es
            await this.page.waitForTimeout(5000);
            
            // R√©cup√©rer le contenu de la page
            const pageContent = await this.page.textContent('body');
            const htmlContent = await this.page.content();
            
            // V√©rifier les messages d'erreur
            const hasErrorMessage = this.errorMessages.some(msg => 
                pageContent.toLowerCase().includes(msg.toLowerCase())
            );
            
            if (hasErrorMessage) {
                const foundError = this.errorMessages.find(msg => 
                    pageContent.toLowerCase().includes(msg.toLowerCase())
                );
                
                return {
                    found: false,
                    reason: 'DOMAINE_NON_REPERTORIE',
                    message: `Domaine non r√©pertori√© dans la base de donn√©es SEO`,
                    errorFound: foundError
                };
            }
            
            // V√©rifier s'il y a des donn√©es num√©riques significatives
            const hasMetrics = this.checkForMetrics(pageContent);
            
            if (!hasMetrics.found) {
                return {
                    found: false,
                    reason: 'DONNEES_INSUFFISANTES',
                    message: 'Aucune m√©trique SEO trouv√©e pour ce domaine',
                    details: hasMetrics.details
                };
            }
            
            // Domaine semble avoir des donn√©es
            return {
                found: true,
                message: 'Domaine r√©pertori√© avec des donn√©es disponibles',
                metrics: hasMetrics.metrics
            };
            
        } catch (error) {
            console.error(`‚ùå Erreur validation ${domain}:`, error.message);
            return {
                found: false,
                reason: 'ERREUR_TECHNIQUE',
                message: `Erreur lors de la v√©rification: ${error.message}`
            };
        }
    }

    /**
     * V√©rifie la pr√©sence de m√©triques sur la page
     */
    checkForMetrics(pageContent) {
        const result = {
            found: false,
            metrics: [],
            details: {}
        };
        
        // Patterns de m√©triques courantes
        const metricPatterns = [
            /(\d+\.?\d*[KMBkm])\s*(visits|visitors|traffic|organic|keywords|backlinks)/gi,
            /(?:visits|visitors|traffic|organic|keywords|backlinks)[:\s]*(\d+\.?\d*[KMBkm])/gi,
            /(\d{1,3}(?:,\d{3})*)\s*(visits|visitors|traffic)/gi
        ];
        
        // Chercher les m√©triques
        metricPatterns.forEach((pattern, index) => {
            const matches = [...pageContent.matchAll(pattern)];
            if (matches.length > 0) {
                result.found = true;
                matches.forEach(match => {
                    result.metrics.push({
                        value: match[1] || match[2],
                        type: match[2] || match[1],
                        pattern: index + 1
                    });
                });
            }
        });
        
        // Comptage de nombres sur la page (indicateur de donn√©es)
        const numbers = pageContent.match(/\d+\.?\d*[KMBkm]/g) || [];
        result.details.numbersFound = numbers.length;
        result.details.uniqueNumbers = [...new Set(numbers)];
        
        // Si au moins 3 nombres avec suffixes, probablement des donn√©es valides
        if (numbers.length >= 3) {
            result.found = true;
        }
        
        return result;
    }

    /**
     * Suggestions de domaines de test connus
     */
    getSuggestedTestDomains() {
        return {
            popular: [
                'amazon.com',
                'wikipedia.org', 
                'airbnb.com',
                'shopify.com',
                'github.com'
            ],
            ecommerce: [
                'amazon.com',
                'shopify.com',
                'etsy.com',
                'ebay.com'
            ],
            tested: [
                'the-foldie.com' // D√©j√† test√© avec succ√®s
            ]
        };
    }

    /**
     * V√©rifie si un domaine existe (accessible web)
     */
    async checkDomainExists(domain) {
        try {
            // Enlever le protocole si pr√©sent
            const cleanDomain = domain.replace(/^https?:\/\//, '');
            const testUrl = `https://${cleanDomain}`;
            
            const response = await this.page.goto(testUrl, { 
                waitUntil: 'domcontentloaded',
                timeout: 15000 
            });
            
            return {
                exists: response && response.ok(),
                status: response ? response.status() : null,
                url: testUrl
            };
            
        } catch (error) {
            return {
                exists: false,
                error: error.message,
                url: `https://${domain}`
            };
        }
    }

    /**
     * Rapport complet de validation d'un domaine
     */
    async validateDomainCompletely(domain) {
        console.log(`üîç VALIDATION COMPL√àTE: ${domain}`);
        console.log('‚ïê'.repeat(50));
        
        const result = {
            domain,
            timestamp: new Date().toISOString(),
            webAccessible: null,
            seoDatabase: null,
            recommendations: []
        };
        
        // 1. V√©rifier l'existence web
        console.log('üì° V√©rification accessibilit√© web...');
        result.webAccessible = await this.checkDomainExists(domain);
        
        if (!result.webAccessible.exists) {
            result.recommendations.push('V√©rifier l\'orthographe du domaine');
            result.recommendations.push('S\'assurer que le site est en ligne');
            
            console.log(`‚ùå Domaine non accessible: ${result.webAccessible.error}`);
            return result;
        }
        
        console.log(`‚úÖ Domaine accessible (${result.webAccessible.status})`);
        
        // 2. V√©rifier pr√©sence dans bases SEO
        console.log('üìä V√©rification bases de donn√©es SEO...');
        const analyticsUrl = `https://server1.noxtools.com/analytics/overview/?db=us&q=${encodeURIComponent(domain)}&searchType=domain`;
        
        result.seoDatabase = await this.checkDomainInSEODatabase(domain, analyticsUrl);
        
        if (!result.seoDatabase.found) {
            result.recommendations.push('Utiliser un domaine plus populaire pour tester');
            result.recommendations.push('V√©rifier sur similarweb.com si des donn√©es existent');
            
            if (result.seoDatabase.reason === 'DOMAINE_NON_REPERTORIE') {
                result.recommendations.push('Site probablement trop petit (< 1000 visiteurs/mois)');
            }
        }
        
        // 3. Suggestions selon le r√©sultat
        if (!result.seoDatabase.found) {
            const suggestions = this.getSuggestedTestDomains();
            result.alternativeDomains = suggestions.popular;
        }
        
        return result;
    }

    /**
     * Affiche un rapport de validation format√©
     */
    displayValidationReport(validationResult) {
        const { domain, webAccessible, seoDatabase, recommendations, alternativeDomains } = validationResult;
        
        console.log(`\nüéØ RAPPORT DE VALIDATION: ${domain}`);
        console.log('‚ïê'.repeat(60));
        
        // Accessibilit√© web
        console.log('\nüì° ACCESSIBILIT√â WEB:');
        if (webAccessible.exists) {
            console.log(`   ‚úÖ Site accessible (HTTP ${webAccessible.status})`);
        } else {
            console.log(`   ‚ùå Site inaccessible: ${webAccessible.error}`);
        }
        
        // Base de donn√©es SEO
        console.log('\nüìä BASES DE DONN√âES SEO:');
        if (seoDatabase.found) {
            console.log(`   ‚úÖ Domaine r√©pertori√© avec donn√©es`);
            if (seoDatabase.metrics) {
                console.log(`   üìà M√©triques trouv√©es: ${seoDatabase.metrics.length}`);
            }
        } else {
            console.log(`   ‚ùå ${seoDatabase.message}`);
            if (seoDatabase.reason) {
                console.log(`   üîç Raison: ${seoDatabase.reason}`);
            }
        }
        
        // Recommandations
        if (recommendations.length > 0) {
            console.log('\nüí° RECOMMANDATIONS:');
            recommendations.forEach(rec => {
                console.log(`   ‚Ä¢ ${rec}`);
            });
        }
        
        // Domaines alternatifs
        if (alternativeDomains) {
            console.log('\nüß™ DOMAINES DE TEST SUGG√âR√âS:');
            alternativeDomains.forEach(domain => {
                console.log(`   ‚Ä¢ ${domain}`);
            });
        }
        
        console.log('');
    }
}

// Export des fonctions utilitaires
export async function validateDomain(page, domain) {
    const validator = new DomainValidator(page);
    const result = await validator.validateDomainCompletely(domain);
    validator.displayValidationReport(result);
    return result;
}

export function createValidationResponse(domain, validationResult) {
    if (validationResult.seoDatabase.found) {
        return {
            success: true,
            domain,
            message: 'Domaine valid√© avec succ√®s',
            data: validationResult
        };
    } else {
        return {
            success: false,
            domain,
            reason: validationResult.seoDatabase.reason || 'VALIDATION_FAILED',
            message: validationResult.seoDatabase.message,
            suggestions: validationResult.recommendations,
            alternativeDomains: validationResult.alternativeDomains
        };
    }
}