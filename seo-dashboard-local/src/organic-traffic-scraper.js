import { NoxToolsScraper } from './noxtools-scraper.js';
import { config } from './config.js';
import fs from 'fs';

class DynamicMetricsScraper extends NoxToolsScraper {
  
  async waitForDynamicContent() {
    console.log('‚è≥ Attente du chargement des donn√©es dynamiques...');
    
    // Attendre que les donn√©es se chargent (plus long d√©lai)
    await this.page.waitForTimeout(10000);
    
    // Attendre que les scripts JS s'ex√©cutent ou timeout plus court
    try {
      await this.page.waitForFunction(() => {
        // V√©rifier si des √©l√©ments contenant des m√©triques sont charg√©s
        const hasNumbers = document.body.textContent.match(/\d+\.?\d*[KMkm]/);
        const hasOrganicContent = document.body.textContent.includes('organic');
        return (hasNumbers && hasNumbers.length > 2) || hasOrganicContent;
      }, { timeout: 15000 });
    } catch (e) {
      console.log('‚ö†Ô∏è  Timeout attente contenu dynamique, on continue...');
    }
    
    console.log('‚úÖ Contenu dynamique charg√© !');
  }
  
  async captureRealTimeMetrics() {
    console.log('üìä Capture des m√©triques en temps r√©el...');
    
    try {
      // Attendre le chargement dynamique
      await this.waitForDynamicContent();
      
      // R√©cup√©rer le HTML final apr√®s chargement des donn√©es
      const finalHtml = await this.page.content();
      
      // R√©cup√©rer les donn√©es depuis les variables JavaScript
      const jsData = await this.page.evaluate(() => {
        const data = {};
        
        // Chercher dans les variables globales communes
        if (window.sm2) data.sm2 = window.sm2;
        if (window.analytics) data.analytics = window.analytics;
        if (window.__sm2mfp) data.sm2mfp = window.__sm2mfp;
        
        // Chercher les √©l√©ments contenant des m√©triques
        const allElements = document.querySelectorAll('*');
        const metrics = [];
        
        allElements.forEach(el => {
          const text = el.textContent || '';
          // Chercher les patterns de m√©triques
          const metricMatch = text.match(/(\d+\.?\d*[KMkm]?)\s*(traffic|visitors|keywords|backlinks|organic)/i);
          if (metricMatch) {
            metrics.push({
              value: metricMatch[1],
              type: metricMatch[2],
              fullText: text.trim(),
              tagName: el.tagName,
              className: el.className
            });
          }
        });
        
        data.extractedMetrics = metrics;
        return data;
      });
      
      // Recherche sp√©cifique de m√©triques dans le HTML
      const htmlMetrics = this.extractMetricsFromHtml(finalHtml);
      
      return {
        jsData,
        htmlMetrics,
        finalHtml: finalHtml.length > 10000 ? finalHtml.substring(0, 10000) + '...' : finalHtml
      };
      
    } catch (error) {
      console.error('‚ùå Erreur capture m√©triques:', error.message);
      return null;
    }
  }
  
  extractMetricsFromHtml(html) {
    console.log('üîç Extraction des m√©triques depuis HTML...');
    
    const metrics = {};
    
    // Patterns sp√©cifiques pour les m√©triques SEO
    const patterns = {
      organicTraffic: [
        /organic\s+(?:search\s+)?traffic[:\s]*(\d+\.?\d*[KMkm]?)/gi,
        /(\d+\.?\d*[KMkm]?)\s+organic\s+(?:search\s+)?traffic/gi,
        /traffic.*?organic[:\s]*(\d+\.?\d*[KMkm]?)/gi
      ],
      organicKeywords: [
        /organic\s+keywords[:\s]*(\d+\.?\d*[KMkm]?)/gi,
        /(\d+\.?\d*[KMkm]?)\s+organic\s+keywords/gi,
        /keywords.*?organic[:\s]*(\d+\.?\d*[KMkm]?)/gi
      ],
      backlinks: [
        /backlinks[:\s]*(\d+\.?\d*[KMkm]?)/gi,
        /(\d+\.?\d*[KMkm]?)\s+backlinks/gi
      ]
    };
    
    Object.entries(patterns).forEach(([metricName, regexList]) => {
      regexList.forEach(regex => {
        const matches = [...html.matchAll(regex)];
        matches.forEach(match => {
          const value = match[1] || match[2];
          if (value && !metrics[metricName]) {
            metrics[metricName] = value;
            console.log(`   ‚úÖ ${metricName}: ${value}`);
          }
        });
      });
    });
    
    return metrics;
  }
  
  async navigateToOrganicOverview() {
    console.log('üå± Navigation vers Organic Overview...');
    
    try {
      // üîß CORRECTIF : R√©cup√©rer le domaine depuis l'argument ou config
      const targetDomain = process.argv[2] || config.analyticsParams?.domain || 'https://the-foldie.com';
      const domain = encodeURIComponent(targetDomain);
      const organicUrl = `https://server1.noxtools.com/analytics/organic/overview/?db=us&q=${domain}&searchType=domain`;
      
      console.log(`üéØ Domaine analys√©: ${targetDomain}`);
      
      console.log(`üéØ URL Organic: ${organicUrl}`);
      
      await this.page.goto(organicUrl, { 
        waitUntil: 'domcontentloaded',
        timeout: 60000 
      });
      
      console.log('‚úÖ Page Organic Overview charg√©e !');
      
      // Attendre le chargement des donn√©es sp√©cifiques √† organic
      await this.waitForDynamicContent();
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur navigation organic:', error.message);
      return false;
    }
  }
  
  async fullOrganicTrafficAnalysis() {
    console.log('üöÄ ANALYSE COMPL√àTE DU TRAFIC ORGANIQUE');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    try {
      await this.init();
      
      // √âtape 1: Connexion
      const loginSuccess = await this.connectToNoxTools();
      if (!loginSuccess) throw new Error('Connexion √©chou√©e');
      
      // √âtape 2: Navigation vers organic overview
      const organicSuccess = await this.navigateToOrganicOverview();
      if (!organicSuccess) throw new Error('Navigation organic √©chou√©e');
      
      // √âtape 3: Capture des m√©triques dynamiques
      const metrics = await this.captureRealTimeMetrics();
      
      // √âtape 4: Sauvegarde
      const timestamp = Date.now();
      const targetDomain = process.argv[2] || config.analyticsParams?.domain || 'https://the-foldie.com';
      const domain = targetDomain.replace(/[^a-zA-Z0-9]/g, '-');
      const filename = `organic-traffic-${domain}-${timestamp}.json`;
      
              const output = {
          timestamp: new Date().toISOString(),
          domain: targetDomain,
          source: 'Organic Overview Page',
        metrics,
        extractionMethod: 'Dynamic Content Capture'
      };
      
              // Sauvegarde
        fs.writeFileSync(filename, JSON.stringify(output, null, 2));
        console.log(`üíæ Donn√©es organiques sauvegard√©es: ${filename}`);
      
      // Affichage des r√©sultats
      this.displayOrganicResults(metrics);
      
      return metrics;
      
    } catch (error) {
      console.error('üí• Erreur analyse organique:', error.message);
    } finally {
      await this.close();
    }
  }
  
  displayOrganicResults(metrics) {
    console.log('\nüéØ R√âSULTATS TRAFIC ORGANIQUE:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    if (metrics && metrics.jsData && metrics.jsData.extractedMetrics) {
      const extracted = metrics.jsData.extractedMetrics;
      
      if (extracted.length > 0) {
        console.log('\nüìä M√âTRIQUES EXTRAITES:');
        extracted.forEach(metric => {
          console.log(`   üî∏ ${metric.type}: ${metric.value}`);
          console.log(`      üìù Contexte: ${metric.fullText.substring(0, 100)}...`);
        });
      }
    }
    
    if (metrics && metrics.htmlMetrics) {
      console.log('\nüìà M√âTRIQUES HTML:');
      Object.entries(metrics.htmlMetrics).forEach(([key, value]) => {
        console.log(`   ‚úÖ ${key}: ${value}`);
      });
    }
    
    // Chercher sp√©cifiquement "60.1k"
    const allContent = JSON.stringify(metrics);
    if (allContent.includes('60.1') || allContent.includes('60,1')) {
      console.log('\nüéØ VALEUR 60.1 TROUV√âE !');
      const matches = allContent.match(/60[.,]1[KMkm]?/g);
      if (matches) {
        matches.forEach(match => {
          console.log(`   ‚≠ê ${match}`);
        });
      }
    }
  }
}

// Lancement du script
async function runOrganicAnalysis() {
  const scraper = new DynamicMetricsScraper();
  await scraper.fullOrganicTrafficAnalysis();
}

export { DynamicMetricsScraper, runOrganicAnalysis };

if (import.meta.url === `file://${process.argv[1]}`) {
  runOrganicAnalysis();
}