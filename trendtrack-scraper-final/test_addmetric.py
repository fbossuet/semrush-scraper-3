#!/usr/bin/env python3
"""
Test de la commande addmetric
V√©rifie que la proc√©dure d'ajout de m√©triques fonctionne correctement
"""

import os
import sys
import tempfile
import shutil
import sqlite3
from pathlib import Path
from addmetric import MetricAdder

def test_addmetric_basic():
    """Test basique de la commande addmetric"""
    print("üß™ TEST BASIQUE DE LA COMMANDE ADDMETRIC")
    print("=" * 50)
    
    # Cr√©er un environnement de test temporaire
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "test_trendtrack"
        test_path.mkdir()
        
        # Cr√©er la structure de base
        (test_path / "data").mkdir()
        (test_path / "docs" / "procedures").mkdir(parents=True)
        
        # Cr√©er une base de donn√©es de test
        db_path = test_path / "data" / "trendtrack.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Cr√©er les tables de test
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS shops (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shop_url TEXT UNIQUE NOT NULL,
                shop_name TEXT,
                monthly_visits INTEGER
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS analytics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shop_id INTEGER NOT NULL,
                organic_traffic INTEGER,
                bounce_rate NUMERIC
            )
        """)
        
        conn.commit()
        conn.close()
        
        # Cr√©er les fichiers de test
        (test_path / "backup_rollback_system.py").write_text("# Test backup system")
        (test_path / "rollback_procedure.py").write_text("# Test rollback procedure")
        
        # Test 1: Ajout d'une m√©trique INTEGER
        print("1Ô∏è‚É£ Test ajout m√©trique INTEGER...")
        adder = MetricAdder(str(test_path))
        
        # Simuler l'ajout d'une m√©trique (sans les √©tapes de sauvegarde)
        try:
            # Test de validation des types
            result = adder._validate_int("1234")
            assert result == 1234, f"Expected 1234, got {result}"
            
            result = adder._validate_int("1,234")
            assert result == 1234, f"Expected 1234, got {result}"
            
            result = adder._validate_int("na")
            assert result is None, f"Expected None, got {result}"
            
            print("   ‚úÖ Validation INTEGER r√©ussie")
            
        except Exception as e:
            print(f"   ‚ùå Erreur validation INTEGER: {e}")
            return False
        
        # Test 2: Ajout d'une m√©trique NUMERIC
        print("2Ô∏è‚É£ Test ajout m√©trique NUMERIC...")
        try:
            result = adder._validate_numeric("0.45")
            assert result == 0.45, f"Expected 0.45, got {result}"
            
            result = adder._validate_numeric("45%")
            assert result == 45.0, f"Expected 45.0, got {result}"
            
            result = adder._validate_numeric("")
            assert result is None, f"Expected None, got {result}"
            
            print("   ‚úÖ Validation NUMERIC r√©ussie")
            
        except Exception as e:
            print(f"   ‚ùå Erreur validation NUMERIC: {e}")
            return False
        
        # Test 3: Ajout d'une m√©trique TEXT
        print("3Ô∏è‚É£ Test ajout m√©trique TEXT...")
        try:
            result = adder._validate_text("test_value")
            assert result == "test_value", f"Expected 'test_value', got {result}"
            
            result = adder._validate_text("")
            assert result is None, f"Expected None, got {result}"
            
            print("   ‚úÖ Validation TEXT r√©ussie")
            
        except Exception as e:
            print(f"   ‚ùå Erreur validation TEXT: {e}")
            return False
        
        # Test 4: Test de la structure de base de donn√©es
        print("4Ô∏è‚É£ Test structure de base de donn√©es...")
        try:
            # Ajouter une m√©trique de test
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute("ALTER TABLE shops ADD COLUMN test_metric INTEGER;")
            conn.commit()
            
            # V√©rifier l'ajout
            cursor.execute("PRAGMA table_info(shops);")
            columns = cursor.fetchall()
            
            test_metric_found = False
            for column in columns:
                if column[1] == 'test_metric':
                    test_metric_found = True
                    break
            
            assert test_metric_found, "Test metric not found in table"
            
            conn.close()
            print("   ‚úÖ Structure de base de donn√©es test√©e")
            
        except Exception as e:
            print(f"   ‚ùå Erreur structure de base: {e}")
            return False
        
        # Test 5: Test des types support√©s
        print("5Ô∏è‚É£ Test types support√©s...")
        try:
            assert 'INTEGER' in adder.supported_types, "INTEGER type not supported"
            assert 'NUMERIC' in adder.supported_types, "NUMERIC type not supported"
            assert 'TEXT' in adder.supported_types, "TEXT type not supported"
            assert 'DATE' in adder.supported_types, "DATE type not supported"
            
            print("   ‚úÖ Tous les types support√©s")
            
        except Exception as e:
            print(f"   ‚ùå Erreur types support√©s: {e}")
            return False
        
        # Test 6: Test des tables support√©es
        print("6Ô∏è‚É£ Test tables support√©es...")
        try:
            assert 'shops' in adder.supported_tables, "shops table not supported"
            assert 'analytics' in adder.supported_tables, "analytics table not supported"
            
            print("   ‚úÖ Toutes les tables support√©es")
            
        except Exception as e:
            print(f"   ‚ùå Erreur tables support√©es: {e}")
            return False
    
    print("‚úÖ TOUS LES TESTS BASIQUES R√âUSSIS")
    return True

def test_addmetric_validation():
    """Test de validation des param√®tres"""
    print("\nüß™ TEST DE VALIDATION DES PARAM√àTRES")
    print("=" * 50)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "test_trendtrack"
        test_path.mkdir()
        (test_path / "data").mkdir()
        
        # Cr√©er une base de donn√©es de test
        db_path = test_path / "data" / "trendtrack.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS shops (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shop_url TEXT UNIQUE NOT NULL
            )
        """)
        
        conn.commit()
        conn.close()
        
        adder = MetricAdder(str(test_path))
        
        # Test 1: Type non support√©
        print("1Ô∏è‚É£ Test type non support√©...")
        try:
            result = adder._step2_analysis("test_metric", "INVALID_TYPE", "shops", "test", "test")
            assert result == False, "Should reject invalid type"
            print("   ‚úÖ Type non support√© rejet√©")
        except Exception as e:
            print(f"   ‚ùå Erreur test type non support√©: {e}")
            return False
        
        # Test 2: Table non support√©e
        print("2Ô∏è‚É£ Test table non support√©e...")
        try:
            result = adder._step2_analysis("test_metric", "INTEGER", "invalid_table", "test", "test")
            assert result == False, "Should reject invalid table"
            print("   ‚úÖ Table non support√©e rejet√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur test table non support√©e: {e}")
            return False
        
        # Test 3: Param√®tres valides
        print("3Ô∏è‚É£ Test param√®tres valides...")
        try:
            result = adder._step2_analysis("test_metric", "INTEGER", "shops", "test", "test")
            assert result == True, "Should accept valid parameters"
            print("   ‚úÖ Param√®tres valides accept√©s")
        except Exception as e:
            print(f"   ‚ùå Erreur test param√®tres valides: {e}")
            return False
    
    print("‚úÖ TOUS LES TESTS DE VALIDATION R√âUSSIS")
    return True

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS DE LA COMMANDE ADDMETRIC")
    print("=" * 60)
    
    try:
        # Test basique
        basic_success = test_addmetric_basic()
        
        # Test de validation
        validation_success = test_addmetric_validation()
        
        if basic_success and validation_success:
            print("\nüéâ TOUS LES TESTS R√âUSSIS!")
            print("=" * 60)
            print("‚úÖ Tests basiques: OK")
            print("‚úÖ Tests de validation: OK")
            print("‚úÖ Commande addmetric pr√™te √† l'utilisation")
            print("=" * 60)
            return 0
        else:
            print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â!")
            print("=" * 60)
            print("üö® La commande addmetric n'est pas fiable")
            print("üîß V√©rifiez les erreurs ci-dessus")
            print("=" * 60)
            return 1
            
    except Exception as e:
        print(f"\nüí• ERREUR CRITIQUE DANS LES TESTS: {e}")
        print("=" * 60)
        print("üö® La commande addmetric n'est pas fonctionnelle")
        print("üîß Intervention manuelle requise")
        print("=" * 60)
        return 1

if __name__ == "__main__":
    sys.exit(main())

