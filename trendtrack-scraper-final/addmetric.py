#!/usr/bin/env python3
"""
Commande automatis√©e pour l'ajout de m√©triques
Applique automatiquement la proc√©dure standardis√©e d'ajout de m√©triques
"""

import os
import sys
import sqlite3
import subprocess
import datetime
import json
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MetricAdder:
    """Classe pour l'ajout automatis√© de m√©triques"""
    
    def __init__(self, base_path: str = "/home/ubuntu/trendtrack-scraper-final"):
        self.base_path = Path(base_path)
        self.db_path = self.base_path / "data" / "trendtrack.db"
        self.procedure_path = self.base_path / "docs" / "procedures" / "metric_addition_procedure.md"
        
        # Types de donn√©es support√©s
        self.supported_types = {
            'INTEGER': self._validate_int,
            'NUMERIC': self._validate_numeric,
            'TEXT': self._validate_text,
            'DATE': self._validate_date
        }
        
        # Tables support√©es
        self.supported_tables = ['shops', 'analytics']
        
        # Scrapers √† mettre √† jour
        self.scrapers_to_update = [
            'smart_scraper_intelligent.py',
            'scrapers/domain_search/domain_scraper.py'
        ]
    
    def add_metric(self, metric_name: str, data_type: str, table: str, 
                   description: str = "", source: str = "unknown") -> bool:
        """
        Ajoute une nouvelle m√©trique en suivant la proc√©dure standardis√©e
        
        Args:
            metric_name: Nom de la m√©trique
            data_type: Type de donn√©es (INTEGER, NUMERIC, TEXT, DATE)
            table: Table cible (shops, analytics)
            description: Description de la m√©trique
            source: Source des donn√©es
            
        Returns:
            bool: True si l'ajout a r√©ussi
        """
        print(f"\nüöÄ AJOUT DE M√âTRIQUE: {metric_name}")
        print("=" * 60)
        print(f"üìä M√©trique: {metric_name}")
        print(f"üè∑Ô∏è Type: {data_type}")
        print(f"üìã Table: {table}")
        print(f"üìù Description: {description}")
        print(f"üîó Source: {source}")
        print("=" * 60)
        
        try:
            # √âTAPE 1: Pr√©paration et s√©curit√©
            if not self._step1_preparation(metric_name):
                return False
            
            # √âTAPE 2: Analyse de la m√©trique
            if not self._step2_analysis(metric_name, data_type, table, description, source):
                return False
            
            # √âTAPE 3: V√©rifications pr√©-impl√©mentation
            if not self._step3_pre_checks(metric_name, table):
                return False
            
            # √âTAPE 4: Modification de la structure de base
            if not self._step4_database_structure(metric_name, data_type, table):
                return False
            
            # √âTAPE 5: Mise √† jour du code de scraping
            if not self._step5_scraping_code(metric_name, data_type, table):
                return False
            
            # √âTAPE 6: Mise √† jour des scrapers
            if not self._step6_scrapers_update(metric_name, data_type, table):
                return False
            
            # √âTAPE 7: Tests de validation
            if not self._step7_validation_tests(metric_name, table):
                return False
            
            # √âTAPE 8: V√©rifications post-impl√©mentation
            if not self._step8_post_checks(metric_name, table):
                return False
            
            # √âTAPE 9: Finalisation
            if not self._step9_finalization(metric_name):
                return False
            
            print(f"\n‚úÖ M√âTRIQUE AJOUT√âE AVEC SUCC√àS: {metric_name}")
            print("=" * 60)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ajout de la m√©trique: {e}")
            self._emergency_rollback(metric_name)
            return False
    
    def _step1_preparation(self, metric_name: str) -> bool:
        """√âTAPE 1: Pr√©paration et s√©curit√©"""
        print("\n1Ô∏è‚É£ √âTAPE 1: PR√âPARATION ET S√âCURIT√â")
        print("-" * 40)
        
        try:
            # Cr√©er une sauvegarde de s√©curit√©
            backup_name = f"backup_avant_ajout_{metric_name}"
            result = subprocess.run([
                'python3', 'backup_rollback_system.py', 'create', backup_name
            ], capture_output=True, text=True, cwd=self.base_path)
            
            if result.returncode != 0:
                print(f"‚ùå Erreur lors de la cr√©ation de la sauvegarde: {result.stderr}")
                return False
            
            print(f"‚úÖ Sauvegarde cr√©√©e: {backup_name}")
            
            # D√©marrer l'op√©ration avec rollback
            operation_name = f"ajout_metrique_{metric_name}"
            result = subprocess.run([
                'python3', 'rollback_procedure.py', 'start', operation_name
            ], capture_output=True, text=True, cwd=self.base_path)
            
            if result.returncode != 0:
                print(f"‚ùå Erreur lors du d√©marrage de l'op√©ration: {result.stderr}")
                return False
            
            print(f"‚úÖ Op√©ration d√©marr√©e: {operation_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans l'√©tape 1: {e}")
            return False
    
    def _step2_analysis(self, metric_name: str, data_type: str, table: str, 
                       description: str, source: str) -> bool:
        """√âTAPE 2: Analyse de la m√©trique"""
        print("\n2Ô∏è‚É£ √âTAPE 2: ANALYSE DE LA M√âTRIQUE")
        print("-" * 40)
        
        # V√©rifier le type de donn√©es
        if data_type not in self.supported_types:
            print(f"‚ùå Type de donn√©es non support√©: {data_type}")
            print(f"‚úÖ Types support√©s: {', '.join(self.supported_types.keys())}")
            return False
        
        # V√©rifier la table
        if table not in self.supported_tables:
            print(f"‚ùå Table non support√©e: {table}")
            print(f"‚úÖ Tables support√©es: {', '.join(self.supported_tables)}")
            return False
        
        # Analyser les types de champs existants
        if not self._analyze_existing_field_types(metric_name, data_type, table):
            return False
        
        print(f"‚úÖ Type de donn√©es valid√©: {data_type}")
        print(f"‚úÖ Table valid√©e: {table}")
        print(f"‚úÖ Description: {description}")
        print(f"‚úÖ Source: {source}")
        
        return True
    
    def _analyze_existing_field_types(self, metric_name: str, data_type: str, table: str) -> bool:
        """Analyse les types de champs existants pour maintenir la coh√©rence"""
        print(f"\nüîç ANALYSE DES TYPES DE CHAMPS EXISTANTS DANS {table}")
        print("-" * 50)
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # R√©cup√©rer tous les champs de la table
            cursor.execute(f"SELECT name, type FROM pragma_table_info('{table}') ORDER BY name;")
            existing_fields = cursor.fetchall()
            
            print(f"üìã Champs existants dans {table}:")
            for field_name, field_type in existing_fields:
                print(f"   - {field_name}: {field_type}")
            
            # Analyser la coh√©rence avec les champs similaires
            consistency_issues = []
            
            # V√©rifier les patterns de noms
            metric_prefix = metric_name.split('_')[0] if '_' in metric_name else metric_name
            
            # Chercher des champs avec le m√™me pr√©fixe
            similar_fields = [f for f in existing_fields if f[0].startswith(metric_prefix)]
            
            if similar_fields:
                print(f"\nüîç Champs similaires trouv√©s (pr√©fixe: {metric_prefix}):")
                for field_name, field_type in similar_fields:
                    print(f"   - {field_name}: {field_type}")
                    
                    # V√©rifier la coh√©rence des types
                    if field_type != data_type:
                        consistency_issues.append(f"Type incoh√©rent: {field_name} ({field_type}) vs {metric_name} ({data_type})")
            
            # V√©rifier les patterns sp√©cifiques
            if metric_name.startswith('market_'):
                market_fields = [f for f in existing_fields if f[0].startswith('market_')]
                if market_fields:
                    expected_type = market_fields[0][1]
                    if data_type != expected_type:
                        consistency_issues.append(f"Tous les champs market_* doivent √™tre {expected_type}, pas {data_type}")
            
            elif metric_name.startswith('pixel_'):
                pixel_fields = [f for f in existing_fields if f[0].startswith('pixel_')]
                if pixel_fields:
                    expected_type = pixel_fields[0][1]
                    if data_type != expected_type:
                        consistency_issues.append(f"Tous les champs pixel_* doivent √™tre {expected_type}, pas {data_type}")
            
            elif metric_name.startswith('monthly_'):
                monthly_fields = [f for f in existing_fields if f[0].startswith('monthly_')]
                if monthly_fields:
                    # Analyser les types existants
                    types_found = set(f[1] for f in monthly_fields)
                    if len(types_found) > 1:
                        consistency_issues.append(f"Types incoh√©rents dans monthly_*: {', '.join(types_found)}")
            
            # Afficher les probl√®mes de coh√©rence
            if consistency_issues:
                print(f"\n‚ö†Ô∏è PROBL√àMES DE COH√âRENCE D√âTECT√âS:")
                for issue in consistency_issues:
                    print(f"   - {issue}")
                
                # Demander confirmation
                print(f"\n‚ùì Voulez-vous continuer malgr√© ces incoh√©rences? (y/N)")
                # En mode automatique, on accepte par d√©faut mais on log l'avertissement
                print("   ‚ö†Ô∏è Mode automatique: continuation avec avertissement")
                logger.warning(f"Incoh√©rences d√©tect√©es pour {metric_name}: {consistency_issues}")
            else:
                print(f"\n‚úÖ Aucun probl√®me de coh√©rence d√©tect√©")
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse des types existants: {e}")
            return False
    
    def _step3_pre_checks(self, metric_name: str, table: str) -> bool:
        """√âTAPE 3: V√©rifications pr√©-impl√©mentation"""
        print("\n3Ô∏è‚É£ √âTAPE 3: V√âRIFICATIONS PR√â-IMPL√âMENTATION")
        print("-" * 40)
        
        try:
            # V√©rifier la structure actuelle de la base
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # V√©rifier si la m√©trique existe d√©j√†
            cursor.execute(f"PRAGMA table_info({table});")
            columns = cursor.fetchall()
            
            for column in columns:
                if column[1] == metric_name:
                    print(f"‚ùå La m√©trique {metric_name} existe d√©j√† dans la table {table}")
                    conn.close()
                    return False
            
            print(f"‚úÖ M√©trique {metric_name} n'existe pas encore")
            print(f"‚úÖ Structure actuelle de {table} v√©rifi√©e")
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans l'√©tape 3: {e}")
            return False
    
    def _step4_database_structure(self, metric_name: str, data_type: str, table: str) -> bool:
        """√âTAPE 4: Modification de la structure de base"""
        print("\n4Ô∏è‚É£ √âTAPE 4: MODIFICATION DE LA STRUCTURE DE BASE")
        print("-" * 40)
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Ajouter le champ √† la table
            alter_sql = f"ALTER TABLE {table} ADD COLUMN {metric_name} {data_type};"
            cursor.execute(alter_sql)
            conn.commit()
            
            print(f"‚úÖ Champ {metric_name} ajout√© √† la table {table}")
            
            # V√©rifier l'ajout
            cursor.execute(f"PRAGMA table_info({table});")
            columns = cursor.fetchall()
            
            for column in columns:
                if column[1] == metric_name:
                    print(f"‚úÖ V√©rification: {metric_name} ({column[2]}) ajout√© avec succ√®s")
                    break
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans l'√©tape 4: {e}")
            return False
    
    def _step5_scraping_code(self, metric_name: str, data_type: str, table: str) -> bool:
        """√âTAPE 5: Mise √† jour du code de scraping"""
        print("\n5Ô∏è‚É£ √âTAPE 5: MISE √Ä JOUR DU CODE DE SCRAPING")
        print("-" * 40)
        
        # Cette √©tape sera impl√©ment√©e dans les scrapers
        print(f"‚úÖ Code de scraping √† mettre √† jour pour {metric_name}")
        print(f"‚úÖ Validation de type {data_type} requise")
        
        return True
    
    def _step6_scrapers_update(self, metric_name: str, data_type: str, table: str) -> bool:
        """√âTAPE 6: Mise √† jour des scrapers"""
        print("\n6Ô∏è‚É£ √âTAPE 6: MISE √Ä JOUR DES SCRAPERS")
        print("-" * 40)
        
        # Cette √©tape sera impl√©ment√©e dans les scrapers
        print(f"‚úÖ Scrapers √† mettre √† jour pour {metric_name}")
        print(f"‚úÖ Requ√™tes SQL √† modifier")
        
        return True
    
    def _step7_validation_tests(self, metric_name: str, table: str) -> bool:
        """√âTAPE 7: Tests de validation"""
        print("\n7Ô∏è‚É£ √âTAPE 7: TESTS DE VALIDATION")
        print("-" * 40)
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Test de la structure de base
            cursor.execute(f"SELECT {metric_name} FROM {table} LIMIT 1;")
            result = cursor.fetchone()
            print(f"‚úÖ Test de structure r√©ussi pour {metric_name}")
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans l'√©tape 7: {e}")
            return False
    
    def _step8_post_checks(self, metric_name: str, table: str) -> bool:
        """√âTAPE 8: V√©rifications post-impl√©mentation"""
        print("\n8Ô∏è‚É£ √âTAPE 8: V√âRIFICATIONS POST-IMPL√âMENTATION")
        print("-" * 40)
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # V√©rifier que la m√©trique est aliment√©e
            cursor.execute(f"SELECT COUNT(*) FROM {table} WHERE {metric_name} IS NOT NULL;")
            count = cursor.fetchone()[0]
            print(f"‚úÖ M√©trique {metric_name} aliment√©e: {count} enregistrements")
            
            # V√©rifier les types de donn√©es
            cursor.execute(f"SELECT typeof({metric_name}) FROM {table} WHERE {metric_name} IS NOT NULL LIMIT 1;")
            type_result = cursor.fetchone()
            if type_result:
                print(f"‚úÖ Type de donn√©es v√©rifi√©: {type_result[0]}")
            
            conn.close()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans l'√©tape 8: {e}")
            return False
    
    def _step9_finalization(self, metric_name: str) -> bool:
        """√âTAPE 9: Finalisation"""
        print("\n9Ô∏è‚É£ √âTAPE 9: FINALISATION")
        print("-" * 40)
        
        try:
            # Terminer l'op√©ration avec succ√®s
            operation_name = f"ajout_metrique_{metric_name}"
            result = subprocess.run([
                'python3', 'rollback_procedure.py', 'complete', operation_name
            ], capture_output=True, text=True, cwd=self.base_path)
            
            if result.returncode != 0:
                print(f"‚ùå Erreur lors de la finalisation: {result.stderr}")
                return False
            
            print(f"‚úÖ Op√©ration termin√©e avec succ√®s: {operation_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur dans l'√©tape 9: {e}")
            return False
    
    def _emergency_rollback(self, metric_name: str) -> bool:
        """Rollback d'urgence en cas d'erreur"""
        print(f"\nüö® ROLLBACK D'URGENCE POUR {metric_name}")
        print("=" * 60)
        
        try:
            operation_name = f"ajout_metrique_{metric_name}"
            result = subprocess.run([
                'python3', 'rollback_procedure.py', 'rollback', 'erreur_critique'
            ], capture_output=True, text=True, cwd=self.base_path)
            
            if result.returncode == 0:
                print("‚úÖ Rollback d'urgence r√©ussi")
                return True
            else:
                print(f"‚ùå √âchec du rollback d'urgence: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du rollback d'urgence: {e}")
            return False
    
    # M√©thodes de validation des types
    def _validate_int(self, value):
        """Valide qu'une valeur est un INTEGER valide"""
        if not value or value == 'na' or value == '':
            return None
        try:
            if isinstance(value, int):
                return value
            cleaned = str(value).replace(',', '').replace(' ', '').replace('$', '')
            return int(float(cleaned))
        except (ValueError, TypeError):
            logger.warning(f"‚ö†Ô∏è Valeur '{value}' n'est pas un INTEGER valide")
            return None
    
    def _validate_numeric(self, value):
        """Valide qu'une valeur est un NUMERIC valide"""
        if not value or value == 'na' or value == '':
            return None
        try:
            if isinstance(value, (int, float)):
                return float(value)
            cleaned = str(value).replace('%', '').replace(' ', '').replace(',', '')
            return float(cleaned)
        except (ValueError, TypeError):
            logger.warning(f"‚ö†Ô∏è Valeur '{value}' n'est pas un NUMERIC valide")
            return None
    
    def _validate_text(self, value):
        """Valide qu'une valeur est un TEXT valide"""
        if not value or value == 'na' or value == '':
            return None
        return str(value)
    
    def _validate_date(self, value):
        """Valide qu'une valeur est un DATE valide"""
        if not value or value == 'na' or value == '':
            return None
        try:
            if isinstance(value, datetime.date):
                return value
            return datetime.datetime.strptime(str(value), '%Y-%m-%d').date()
        except (ValueError, TypeError):
            logger.warning(f"‚ö†Ô∏è Valeur '{value}' n'est pas un DATE valide")
            return None

def main():
    """Fonction principale pour la commande addmetric"""
    if len(sys.argv) < 4:
        print("Usage: python3 addmetric.py <metric_name> <data_type> <table> [description] [source]")
        print("\nExemples:")
        print("  python3 addmetric.py conversion_rate NUMERIC analytics 'Taux de conversion' 'MyToolsPlan'")
        print("  python3 addmetric.py total_products INTEGER shops 'Nombre total de produits' 'TrendTrack'")
        print("\nTypes support√©s: INTEGER, NUMERIC, TEXT, DATE")
        print("Tables support√©es: shops, analytics")
        return 1
    
    metric_name = sys.argv[1]
    data_type = sys.argv[2].upper()
    table = sys.argv[3]
    description = sys.argv[4] if len(sys.argv) > 4 else ""
    source = sys.argv[5] if len(sys.argv) > 5 else "unknown"
    
    # Initialiser l'ajouteur de m√©triques
    adder = MetricAdder()
    
    # Ajouter la m√©trique
    success = adder.add_metric(metric_name, data_type, table, description, source)
    
    if success:
        print(f"\nüéâ M√âTRIQUE {metric_name} AJOUT√âE AVEC SUCC√àS!")
        return 0
    else:
        print(f"\n‚ùå √âCHEC DE L'AJOUT DE LA M√âTRIQUE {metric_name}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
