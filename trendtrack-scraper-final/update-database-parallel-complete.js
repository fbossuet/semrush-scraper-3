/**
 * ARCHITECTURE PARALL√àLE COMPL√àTE - TrendTrack Scraper
 * Phase 1: Extraction du tableau (fonctionne)
 * Phase 2: Extraction des d√©tails en parall√®le (nouveau)
 */

import { WebScraper } from './src/scraper.js';
import { TrendTrackExtractor } from './src/extractors/trendtrack-extractor.js';
import { DatabaseManager } from './src/database/database-manager.js';
import { ShopRepository } from './src/database/shop-repository.js';
import fs from 'fs';

const LOG_PROGRESS_FILE = 'logs/update-database-parallel-complete.log';

function logProgress(msg) {
  const line = `[${new Date().toISOString()}] ${msg}\n`;
  fs.appendFileSync(LOG_PROGRESS_FILE, line);
  console.log(msg);
}

// Nettoie le fichier de log au d√©but
fs.writeFileSync(LOG_PROGRESS_FILE, '');

// PHASE 1: Extraction des donn√©es du tableau uniquement
async function extractTableDataOnly(extractor, pageCount = 5) {
  logProgress(`üìã PHASE 1: Extraction de ${pageCount} pages (m√©thode existante)...`);
  
  const allTableData = [];
  
  for (let page = 1; page <= pageCount; page++) {
    logProgress(`‚û°Ô∏è  Extraction page ${page}/${pageCount}...`);
    
    try {
      // Navigation vers la page
      const navSuccess = await extractor.navigateToTrendingShops(page);
      if (!navSuccess) {
        logProgress(`‚ùå Navigation √©chou√©e pour la page ${page}`);
        continue;
      }
      
      // Attendre que le tableau soit charg√©
      await extractor.page.waitForSelector('tbody tr', { timeout: 60000 });
      
      // R√©cup√©rer toutes les lignes du tableau
      const rows = await extractor.page.locator('tbody tr').all();
      logProgress(`üìä ${rows.length} lignes trouv√©es dans le tableau`);
      
      let pageShops = 0;
      
      // Extraire chaque ligne avec les S√âLECTEURS QUI FONCTIONNENT
      for (let i = 0; i < rows.length; i++) {
        try {
          const row = rows[i];
          const cells = await row.locator('td').all();
          if (cells.length < 8) {
            continue;
          }

          const shopData = {};
          
          // 1. EXTRACTION INFO BOUTIQUE (cellule 1) - S√âLECTEURS QUI FONCTIONNENT
          try {
            const shopInfoHtml = await cells[1].innerHTML();
            const shopNameMatch = shopInfoHtml.match(/<p class=\"text-sm font-semibold\">([^<]+)<\/p>/);
            shopData.shopName = shopNameMatch ? shopNameMatch[1].trim() : '';
            const shopUrlMatch = shopInfoHtml.match(/href=["']([^"']+)["']/);
            shopData.shopUrl = shopUrlMatch ? shopUrlMatch[1] : '';
            const dateMatch = shopInfoHtml.match(/(\d{2}\/\d{2}\/\d{4})/);
            shopData.creationDate = dateMatch ? dateMatch[1] : '';
          } catch (error) {
            shopData.shopName = '';
            shopData.shopUrl = '';
            shopData.creationDate = '';
          }
          
          // 2. EXTRACTION NOMBRE DE PRODUITS (cellule 2) - S√âLECTEURS QUI FONCTIONNENT
          try {
            const productsCell = cells[2];
            const productsP = productsCell.locator("p:has(> span:has-text(\"products\"))");
            const productsText = await productsP.textContent();
            if (productsText) {
              const match = productsText.match(/\d[\d\s.,]*/);
              shopData.totalProducts = match ? Number(match[0].replace(/[^\d]/g, "")) : null;
            } else {
              shopData.totalProducts = null;
            }
          } catch (error) {
            shopData.totalProducts = null;
          }
          
          // 3. EXTRACTION M√âTRIQUES DE BASE (cellules 3, 4, 5) - S√âLECTEURS QUI FONCTIONNENT
          try {
            shopData.category = (await cells[3].textContent()).trim();
            shopData.monthlyVisits = (await cells[4].textContent()).trim();
            shopData.monthlyRevenue = (await cells[5].textContent()).trim();
          } catch (error) {
            shopData.category = '';
            shopData.monthlyVisits = '';
            shopData.monthlyRevenue = '';
          }
          
          // 4. EXTRACTION LIVE ADS (cellule 7) - S√âLECTEURS QUI FONCTIONNENT
          try {
            const liveAdsDiv = await cells[7].locator('div.flex.items-center.justify-center.font-semibold');
            const liveAdsP = await liveAdsDiv.locator('p').first();
            shopData.liveAds = liveAdsP ? (await liveAdsP.textContent()).trim() : '';
          } catch (error) {
            shopData.liveAds = '';
          }

          // Ajouter les m√©tadonn√©es
          shopData.scraping_status = 'table_extracted';
          shopData.last_updated = new Date().toISOString();

          // V√©rifier qu'on a au moins le nom et l'URL
          if (!shopData.shopName || !shopData.shopUrl) {
            continue;
          }

          allTableData.push(shopData);
          pageShops++;
          
        } catch (error) {
          continue;
        }
        
        // Pause minimale entre les extractions
        await new Promise(resolve => setTimeout(resolve, 50));
      }
      
      logProgress(`‚úÖ Page ${page}: ${pageShops} boutiques extraites du tableau`);
      
    } catch (error) {
      logProgress(`‚ùå Erreur page ${page}: ${error.message}`);
    }
  }
  
  logProgress(`‚úÖ PHASE 1 TERMIN√âE: ${allTableData.length} boutiques extraites du tableau`);
  return allTableData;
}

// PHASE 2: Sauvegarde imm√©diate et pr√©paration pour l'extraction des d√©tails
async function saveTableDataAndPrepareDetails(shopRepo, allTableData) {
  logProgress(`üíæ PHASE 2: Sauvegarde imm√©diate des donn√©es du tableau...`);
  
  const shopsToProcess = [];
  let savedCount = 0;
  
  for (const shopData of allTableData) {
    try {
      // V√©rifier si le shop existe d√©j√†
      const existingShop = await shopRepo.getByUrl(shopData.shopUrl);
      if (existingShop) {
        logProgress(`‚è≠Ô∏è Shop existant: ${shopData.shopName} - Mise √† jour`);
        // Mettre √† jour avec upsert (m√©thode qui fonctionne)
        const shopId = await shopRepo.upsert(shopData);
        if (shopId) {
          shopsToProcess.push({ id: shopId, ...shopData });
        }
      } else {
        // Shop n'existe pas, on l'ajoute avec upsert (m√©thode qui fonctionne)
        const shopId = await shopRepo.upsert(shopData);
        if (shopId) {
          shopsToProcess.push({ id: shopId, ...shopData });
          savedCount++;
        }
      }
    } catch (error) {
      logProgress(`‚ùå Erreur sauvegarde: ${error.message}`);
    }
  }
  
  logProgress(`üì¶ Lot 1/1 sauvegard√©`);
  logProgress(`‚úÖ PHASE 2 TERMIN√âE: ${savedCount} boutiques sauvegard√©es en base`);
  
  return shopsToProcess;
}

// PHASE 3: Extraction parall√®le des d√©tails
async function extractAndSaveDetailsInParallel(extractor, shopRepo, shopsToProcess) {
  logProgress(`üîÑ PHASE 3: Extraction parall√®le des d√©tails pour ${shopsToProcess.length} boutiques...`);
  
  const batchSize = 5; // Traiter par lots de 5 boutiques en parall√®le
  let processedCount = 0;
  
  for (let i = 0; i < shopsToProcess.length; i += batchSize) {
    const batch = shopsToProcess.slice(i, i + batchSize);
    logProgress(`üì¶ Traitement lot ${Math.floor(i/batchSize) + 1}/${Math.ceil(shopsToProcess.length/batchSize)} (${batch.length} boutiques)`);
    
    // Traiter le lot en parall√®le
    const promises = batch.map(async (shop) => {
      try {
        logProgress(`üîç Extraction d√©tails: ${shop.shopName}`);
        
        // Navigation vers la page de d√©tail
        const detailSuccess = await extractor.navigateToShopDetail(shop.shopUrl);
        if (!detailSuccess) {
          logProgress(`‚ùå Navigation √©chou√©e pour ${shop.shopName}`);
          return;
        }
        
        // Extraction des m√©triques d√©taill√©es
        const detailData = await extractor.extractShopDetails();
        if (detailData) {
          // Mettre √† jour en base
          await shopRepo.updateDetailMetrics(shop.id, detailData);
          logProgress(`‚úÖ D√©tails extraits: ${shop.shopName}`);
        } else {
          logProgress(`‚ö†Ô∏è Aucun d√©tail extrait: ${shop.shopName}`);
        }
        
      } catch (error) {
        logProgress(`‚ùå Erreur extraction d√©tails ${shop.shopName}: ${error.message}`);
      }
    });
    
    // Attendre que tous les d√©tails du lot soient trait√©s
    await Promise.all(promises);
    processedCount += batch.length;
    
    logProgress(`‚úÖ Lot ${Math.floor(i/batchSize) + 1} termin√©: ${processedCount}/${shopsToProcess.length} boutiques trait√©es`);
    
    // Pause entre les lots pour √©viter la surcharge
    if (i + batchSize < shopsToProcess.length) {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  logProgress(`‚úÖ PHASE 3 TERMIN√âE: ${processedCount} boutiques trait√©es en parall√®le`);
}

// FONCTION PRINCIPALE
async function updateDatabaseParallel() {
  logProgress('üöÄ D√âMARRAGE - Architecture parall√®le COMPL√àTE TrendTrack');
  logProgress('==================================================');
  
  let scraper = null;
  let extractor = null;
  let dbManager = null;
  let shopRepo = null;
  
  try {
    // Initialiser le scraper
    logProgress('üöÄ Initialisation du scraper...');
    scraper = new WebScraper();
    await scraper.init();
    extractor = new TrendTrackExtractor(scraper.page, scraper.errorHandler);
    
    // Initialiser la base de donn√©es
    logProgress('üóÑÔ∏è Initialisation de la base de donn√©es...');
    dbManager = new DatabaseManager();
    await dbManager.init();
    shopRepo = new ShopRepository(dbManager);
    
    // Connexion √† TrendTrack
    logProgress('üîë Connexion √† TrendTrack...');
    const loginSuccess = await extractor.login('seif.alyakoob@gmail.com', 'Toulouse31!');
    
    if (!loginSuccess) {
      logProgress('‚ùå √âchec de la connexion');
      return;
    }
    
    // PHASE 1: Extraction des donn√©es du tableau
    const allTableData = await extractTableDataOnly(extractor, 5);
    
    if (allTableData.length === 0) {
      logProgress('‚ùå Aucune boutique extraite');
      return;
    }
    
    // PHASE 2: Sauvegarde imm√©diate des donn√©es du tableau
    const shopsToProcess = await saveTableDataAndPrepareDetails(shopRepo, allTableData);
    
    if (shopsToProcess.length === 0) {
      logProgress('‚ùå Aucune boutique sauvegard√©e');
      return;
    }
    
    // PHASE 3: Extraction parall√®le des d√©tails
    await extractAndSaveDetailsInParallel(extractor, shopRepo, shopsToProcess);
    
    // Statistiques finales
    logProgress('\nüìä STATISTIQUES FINALES - ARCHITECTURE PARALL√àLE COMPL√àTE:');
    logProgress('==================================================');
    logProgress(`üìà Boutiques extraites du tableau: ${allTableData.length}`);
    logProgress(`üíæ Boutiques sauvegard√©es en base: ${shopsToProcess.length}`);
    logProgress(`üîÑ Boutiques trait√©es en parall√®le: ${shopsToProcess.length}`);
    logProgress('‚úÖ Architecture parall√®le compl√®te termin√©e !');
    
  } catch (error) {
    logProgress(`‚ùå Erreur fatale: ${error.message}`);
    console.error('‚ùå Erreur d√©taill√©e:', error);
  } finally {
    // Fermer les connexions
    if (scraper) {
      try {
        await scraper.close();
        logProgress('üîö Fermeture du scraper...');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture scraper: ${error.message}`);
      }
    }
    
    if (dbManager) {
      try {
        await dbManager.close();
        logProgress('üîí Connexion base de donn√©es ferm√©e');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture base: ${error.message}`);
      }
    }
  }
}

// Ex√©cution du script
updateDatabaseParallel().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});
