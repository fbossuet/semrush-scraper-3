#!/usr/bin/env python3
"""
Proc√©dure de rollback pour les op√©rations critiques
Assure la s√©curit√© des modifications majeures
"""

import os
import sys
import subprocess
import datetime
from pathlib import Path
from backup_rollback_system import BackupRollbackSystem

class RollbackProcedure:
    """Proc√©dure de rollback s√©curis√©e"""
    
    def __init__(self, base_path: str = "/home/ubuntu/trendtrack-scraper-final"):
        self.base_path = Path(base_path)
        self.backup_system = BackupRollbackSystem(base_path)
        self.current_backup = None
    
    def start_operation(self, operation_name: str) -> str:
        """
        D√©marre une op√©ration critique avec sauvegarde automatique
        
        Args:
            operation_name: Nom de l'op√©ration
            
        Returns:
            str: Nom de la sauvegarde cr√©√©e
        """
        print(f"\nüöÄ D√âMARRAGE DE L'OP√âRATION: {operation_name}")
        print("=" * 60)
        
        # Cr√©er une sauvegarde automatique
        self.current_backup = self.backup_system.create_quick_backup(operation_name)
        print(f"‚úÖ Sauvegarde automatique cr√©√©e: {self.current_backup}")
        
        # V√©rifier l'int√©grit√© de la sauvegarde
        if not self.backup_system.verify_backup(self.current_backup):
            print("‚ùå ERREUR: La sauvegarde n'est pas valide!")
            sys.exit(1)
        
        print(f"‚úÖ Sauvegarde v√©rifi√©e et valide")
        print(f"üìù Op√©ration: {operation_name}")
        print(f"‚è∞ D√©but: {datetime.datetime.now(timezone.utc).isoformat()}")
        print("=" * 60)
        
        return self.current_backup
    
    def rollback_operation(self, reason: str = "Erreur d√©tect√©e") -> bool:
        """
        Effectue un rollback de l'op√©ration en cours
        
        Args:
            reason: Raison du rollback
            
        Returns:
            bool: True si le rollback a r√©ussi
        """
        if not self.current_backup:
            print("‚ùå ERREUR: Aucune sauvegarde disponible pour le rollback!")
            return False
        
        print(f"\nüîÑ ROLLBACK EN COURS")
        print("=" * 60)
        print(f"üìù Raison: {reason}")
        print(f"üì¶ Sauvegarde: {self.current_backup}")
        print(f"‚è∞ D√©but rollback: {datetime.datetime.now(timezone.utc).isoformat()}")
        print("=" * 60)
        
        # Effectuer le rollback
        success = self.backup_system.restore_backup(self.current_backup, confirm=True)
        
        if success:
            print("‚úÖ ROLLBACK R√âUSSI")
            print("=" * 60)
            print(f"üì¶ Syst√®me restaur√© depuis: {self.current_backup}")
            print(f"‚è∞ Fin rollback: {datetime.datetime.now(timezone.utc).isoformat()}")
            print("=" * 60)
        else:
            print("‚ùå √âCHEC DU ROLLBACK")
            print("=" * 60)
            print("üö® ATTENTION: Le syst√®me pourrait √™tre dans un √©tat incoh√©rent!")
            print("üîß Intervention manuelle requise")
            print("=" * 60)
        
        return success
    
    def complete_operation(self, operation_name: str) -> bool:
        """
        Termine une op√©ration avec succ√®s
        
        Args:
            operation_name: Nom de l'op√©ration
            
        Returns:
            bool: True si l'op√©ration est termin√©e avec succ√®s
        """
        print(f"\n‚úÖ OP√âRATION TERMIN√âE AVEC SUCC√àS")
        print("=" * 60)
        print(f"üìù Op√©ration: {operation_name}")
        print(f"üì¶ Sauvegarde de s√©curit√©: {self.current_backup}")
        print(f"‚è∞ Fin: {datetime.datetime.now(timezone.utc).isoformat()}")
        print("=" * 60)
        
        # Optionnel: garder la sauvegarde ou la supprimer
        keep_backup = input("\nüíæ Garder la sauvegarde de s√©curit√©? (y/N): ").lower() == 'y'
        
        if not keep_backup and self.current_backup:
            try:
                import shutil
                backup_path = Path(self.backup_system.backup_dir) / self.current_backup
                if backup_path.exists():
                    shutil.rmtree(backup_path)
                    print(f"üóëÔ∏è Sauvegarde supprim√©e: {self.current_backup}")
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible de supprimer la sauvegarde: {e}")
        
        return True
    
    def emergency_rollback(self, backup_name: str) -> bool:
        """
        Rollback d'urgence vers une sauvegarde sp√©cifique
        
        Args:
            backup_name: Nom de la sauvegarde
            
        Returns:
            bool: True si le rollback a r√©ussi
        """
        print(f"\nüö® ROLLBACK D'URGENCE")
        print("=" * 60)
        print(f"üì¶ Sauvegarde cible: {backup_name}")
        print(f"‚è∞ D√©but: {datetime.datetime.now(timezone.utc).isoformat()}")
        print("=" * 60)
        
        # Confirmation d'urgence
        confirm = input("‚ö†Ô∏è √ätes-vous s√ªr de vouloir effectuer un rollback d'urgence? (yes/NO): ")
        if confirm.lower() != 'yes':
            print("‚ùå Rollback d'urgence annul√©")
            return False
        
        success = self.backup_system.restore_backup(backup_name, confirm=True)
        
        if success:
            print("‚úÖ ROLLBACK D'URGENCE R√âUSSI")
            print("=" * 60)
            print(f"üì¶ Syst√®me restaur√© depuis: {backup_name}")
            print(f"‚è∞ Fin: {datetime.datetime.now(timezone.utc).isoformat()}")
            print("=" * 60)
        else:
            print("‚ùå √âCHEC DU ROLLBACK D'URGENCE")
            print("=" * 60)
            print("üö® ATTENTION: Le syst√®me pourrait √™tre dans un √©tat incoh√©rent!")
            print("üîß Intervention manuelle requise")
            print("=" * 60)
        
        return success

def main():
    """Fonction principale pour les op√©rations de rollback"""
    if len(sys.argv) < 2:
        print("Usage: python rollback_procedure.py <command> [args]")
        print("Commands:")
        print("  start <operation>  - D√©marrer une op√©ration avec sauvegarde")
        print("  rollback          - Rollback de l'op√©ration en cours")
        print("  complete <op>     - Terminer une op√©ration avec succ√®s")
        print("  emergency <name>  - Rollback d'urgence vers une sauvegarde")
        return
    
    procedure = RollbackProcedure()
    command = sys.argv[1]
    
    if command == "start":
        if len(sys.argv) < 3:
            print("‚ùå Nom d'op√©ration requis")
            return
        operation_name = sys.argv[2]
        backup_name = procedure.start_operation(operation_name)
        print(f"‚úÖ Op√©ration d√©marr√©e avec sauvegarde: {backup_name}")
    
    elif command == "rollback":
        reason = sys.argv[2] if len(sys.argv) > 2 else "Rollback manuel"
        success = procedure.rollback_operation(reason)
        if success:
            print("‚úÖ Rollback r√©ussi")
        else:
            print("‚ùå √âchec du rollback")
    
    elif command == "complete":
        if len(sys.argv) < 3:
            print("‚ùå Nom d'op√©ration requis")
            return
        operation_name = sys.argv[2]
        procedure.complete_operation(operation_name)
    
    elif command == "emergency":
        if len(sys.argv) < 3:
            print("‚ùå Nom de sauvegarde requis")
            return
        backup_name = sys.argv[2]
        success = procedure.emergency_rollback(backup_name)
        if success:
            print("‚úÖ Rollback d'urgence r√©ussi")
        else:
            print("‚ùå √âchec du rollback d'urgence")
    
    else:
        print(f"‚ùå Commande inconnue: {command}")

if __name__ == "__main__":
    main()

