#!/usr/bin/env python3
import sqlite3
import re

def standardize_errors():
    db_path = "/home/ubuntu/trendtrack-scraper-final/data/trendtrack.db"
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("üîß Standardisation des valeurs d'erreur...")
    
    # PATTERNS √Ä REMPLACER
    error_patterns = [
        r'S√©lecteur non trouv√©\|Erreur',
        r'S√©lecteur non trouv√©: .*',
        r'Domaine non trouv√©',
        r'Erreur: .*',
        r'Timeout .*',
        r'Erreur de connexion',
        r'Page non accessible'
    ]
    
    # VALEUR STANDARDIS√âE
    standard_error = 'na'
    
    # M√âTRIQUES √Ä NETTOYER
    metrics = [
        'organic_traffic', 'bounce_rate', 'avg_visit_duration',
        'branded_traffic', 'conversion_rate', 'paid_search_traffic',
        'visits', 'traffic', 'percent_branded_traffic'
    ]
    
    total_updated = 0
    
    for metric in metrics:
        print(f"  üìä Nettoyage de {metric}...")
        
        # Compter les valeurs probl√©matiques
        cursor.execute(f"""
            SELECT COUNT(*) FROM analytics 
            WHERE {metric} LIKE '%S√©lecteur non trouv√©%' 
            OR {metric} LIKE '%Domaine non trouv√©%'
            OR {metric} LIKE '%Erreur%'
            OR {metric} LIKE '%Timeout%'
        """)
        count = cursor.fetchone()[0]
        
        if count > 0:
            # Remplacer toutes les erreurs par 'na'
            cursor.execute(f"""
                UPDATE analytics 
                SET {metric} = ? 
                WHERE {metric} LIKE '%S√©lecteur non trouv√©%' 
                OR {metric} LIKE '%Domaine non trouv√©%'
                OR {metric} LIKE '%Erreur%'
                OR {metric} LIKE '%Timeout%'
            """, (standard_error,))
            
            updated = cursor.rowcount
            total_updated += updated
            print(f"    ‚úÖ {updated} valeurs corrig√©es")
        else:
            print(f"    ‚úÖ Aucune valeur probl√©matique")
    
    # Nettoyer les champs vides (NULL ou cha√Ænes vides)
    print("  üßπ Nettoyage des champs vides...")
    
    for metric in metrics:
        cursor.execute(f"""
            UPDATE analytics 
            SET {metric} = ? 
            WHERE {metric} IS NULL 
            OR {metric} = '' 
            OR {metric} = 'null'
        """, (standard_error,))
        
        updated = cursor.rowcount
        total_updated += updated
        print(f"    ‚úÖ {metric}: {updated} valeurs vides ‚Üí 'na'")
    
    conn.commit()
    
    print(f"\nüéØ TOTAL: {total_updated} valeurs standardis√©es")
    
    # V√âRIFIER LE R√âSULTAT
    print("\nüîç V√©rification des valeurs apr√®s nettoyage...")
    
    for metric in metrics:
        cursor.execute(f"""
            SELECT {metric}, COUNT(*) as count
            FROM analytics 
            GROUP BY {metric}
            ORDER BY count DESC
            LIMIT 5
        """)
        
        print(f"  üìä {metric}:")
        for value, count in cursor.fetchall():
            print(f"    '{value}': {count}")
    
    conn.close()

if __name__ == "__main__":
    standardize_errors()
