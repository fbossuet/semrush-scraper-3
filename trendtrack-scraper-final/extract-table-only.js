/**
 * Script d'extraction UNIQUEMENT des donn√©es du tableau
 * √âvite le probl√®me de session perdue en ne naviguant pas vers les d√©tails
 */

import { WebScraper } from './src/scraper.js';
import { TrendTrackExtractor } from './src/extractors/trendtrack-extractor.js';
import { DatabaseManager } from './src/database/database-manager.js';
import { ShopRepository } from './src/database/shop-repository.js';
import fs from 'fs';

const LOG_PROGRESS_FILE = 'logs/extract-table-only.log';

function logProgress(msg) {
  const line = `[${new Date().toISOString()}] ${msg}\n`;
  fs.appendFileSync(LOG_PROGRESS_FILE, line);
  console.log(msg);
}

// Nettoie le fichier de log au d√©but
fs.writeFileSync(LOG_PROGRESS_FILE, '');

async function extractTableOnly() {
  logProgress('üöÄ EXTRACTION TABLEAU UNIQUEMENT - D√©marrage');
  
  let scraper = null;
  let extractor = null;
  let dbManager = null;
  let shopRepo = null;
  
  try {
    // Initialiser le scraper
    logProgress('üöÄ Initialisation du scraper...');
    scraper = new WebScraper();
    await scraper.init();
    extractor = new TrendTrackExtractor(scraper.page, scraper.errorHandler);
    
    // Initialiser la base de donn√©es
    logProgress('üóÑÔ∏è Initialisation de la base de donn√©es...');
    dbManager = new DatabaseManager();
    await dbManager.init();
    shopRepo = new ShopRepository(dbManager);
    
    // Connexion √† TrendTrack
    logProgress('üîë Connexion √† TrendTrack...');
    const loginSuccess = await extractor.login('seif.alyakoob@gmail.com', 'Toulouse31!');
    
    if (!loginSuccess) {
      logProgress('‚ùå √âchec de la connexion');
      return;
    }
    
    // Navigation vers la page 1
    logProgress('üìã Navigation vers la page 1...');
    const navSuccess = await extractor.navigateToTrendingShops(1);
    if (!navSuccess) {
      logProgress('‚ùå Navigation √©chou√©e');
      return;
    }
    
    // Extraction des donn√©es du tableau UNIQUEMENT (sans navigation vers d√©tails)
    logProgress('üìã Extraction des donn√©es du tableau...');
    
    // Attendre que le tableau soit charg√©
    await extractor.page.waitForSelector('tbody tr', { timeout: 60000 });
    
    // R√©cup√©rer toutes les lignes du tableau
    const rows = await extractor.page.locator('tbody tr').all();
    logProgress(`üìä ${rows.length} lignes trouv√©es dans le tableau`);
    
    const shopsData = [];
    
    // Extraire chaque ligne SANS navigation vers les d√©tails
    for (let i = 0; i < rows.length; i++) {
      logProgress(`üîç Extraction ligne ${i + 1}/${rows.length}...`);
      
      try {
        const cells = await rows[i].locator('td').all();
        if (cells.length < 6) {
          logProgress('‚ö†Ô∏è Ligne avec seulement', cells.length, 'cellules, ignor√©e');
          continue;
        }

        // Extraction des donn√©es de base du tableau uniquement
        const shopData = {};
        
        // Nom de la boutique
        try {
          const nameElement = await cells[0].locator('p.text-sm.font-semibold').first();
          if (await nameElement.count() > 0) {
            shopData.shop_name = (await nameElement.textContent())?.trim();
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Nom de boutique non trouv√©');
        }

        // URL de la boutique
        try {
          const urlElement = await cells[0].locator('a[href*="http"]').first();
          if (await urlElement.count() > 0) {
            shopData.shop_url = await urlElement.getAttribute('href');
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è URL de boutique non trouv√©e');
        }

        // Cat√©gorie
        try {
          const categoryElement = await cells[1].locator('div').first();
          if (await categoryElement.count() > 0) {
            shopData.category = (await categoryElement.textContent())?.trim();
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Cat√©gorie non trouv√©e');
        }

        // Visites mensuelles
        try {
          const visitsElement = await cells[2].locator('p.font-bold').first();
          if (await visitsElement.count() > 0) {
            shopData.monthly_visits = extractor.parseNumber(await visitsElement.textContent());
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Visites mensuelles non trouv√©es');
        }

        // Revenus mensuels
        try {
          const revenueElement = await cells[3].locator('p.font-bold').first();
          if (await revenueElement.count() > 0) {
            shopData.monthly_revenue = extractor.parseNumber(await revenueElement.textContent());
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Revenus mensuels non trouv√©s');
        }

        // Nombre de produits
        try {
          const productsElement = await cells[4].locator('p.font-bold').first();
          if (await productsElement.count() > 0) {
            shopData.total_products = extractor.parseNumber(await productsElement.textContent());
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Nombre de produits non trouv√©');
        }

        // Live ads 7d
        try {
          const liveAds7dElement = await cells[5].locator('p').first();
          if (await liveAds7dElement.count() > 0) {
            shopData.live_ads_7d = extractor.parseNumber(await liveAds7dElement.textContent());
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Live ads 7d non trouv√©s');
        }

        // Live ads 30d
        try {
          const liveAds30dElement = await cells[6].locator('p').first();
          if (await liveAds30dElement.count() > 0) {
            shopData.live_ads_30d = extractor.parseNumber(await liveAds30dElement.textContent());
          }
        } catch (error) {
          logProgress('‚ö†Ô∏è Live ads 30d non trouv√©s');
        }

        // Ajouter les m√©tadonn√©es
        shopData.scraping_status = 'table_extracted';
        shopData.last_updated = new Date().toISOString();

        // V√©rifier qu'on a au moins le nom et l'URL
        if (!shopData.shop_name || !shopData.shop_url) {
          logProgress('‚ö†Ô∏è Donn√©es insuffisantes pour la boutique');
          continue;
        }

        logProgress(`‚úÖ Boutique extraite: ${shopData.shop_name} (${shopData.shop_url})`);
        shopsData.push(shopData);
        
      } catch (error) {
        logProgress(`‚ùå Erreur extraction ligne ${i + 1}: ${error.message}`);
        continue;
      }
      
      // Pause minimale entre les extractions
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    logProgress(`\nüìä R√âSULTATS EXTRACTION:`);
    logProgress(`‚úÖ ${shopsData.length} boutiques extraites du tableau`);
    
    // Sauvegarde imm√©diate en base
    logProgress('\nüíæ Sauvegarde en base...');
    
    const results = {
      inserted: 0,
      skipped: 0,
      errors: 0
    };
    
    for (const shopData of shopsData) {
      try {
        // V√©rifier si le shop existe d√©j√†
        const existingShop = await shopRepo.getByUrl(shopData.shop_url);
        if (existingShop) {
          logProgress(`‚è≠Ô∏è Shop d√©j√† existant: ${shopData.shop_name} - Ignor√©`);
          results.skipped++;
          continue;
        }
        
        // Shop n'existe pas, on l'ajoute
        const shopId = await shopRepo.upsert(shopData);
        if (shopId) {
          results.inserted++;
          logProgress(`üÜï Nouveau shop: ${shopData.shop_name} - ID: ${shopId}`);
        } else {
          results.errors++;
          logProgress(`‚ùå √âchec upsert: ${shopData.shop_name}`);
        }
      } catch (error) {
        results.errors++;
        logProgress(`‚ùå Erreur traitement: ${error.message}`);
      }
    }
    
    // Export debug des donn√©es
    fs.writeFileSync('export-table-data.json', JSON.stringify(shopsData, null, 2));
    
    // Statistiques finales
    logProgress('\nüìä STATISTIQUES FINALES:');
    logProgress('==================================================');
    logProgress(`üìã Boutiques extraites du tableau: ${shopsData.length}`);
    logProgress(`üÜï Nouvelles boutiques ajout√©es: ${results.inserted}`);
    logProgress(`‚è≠Ô∏è Boutiques ignor√©es (d√©j√† existantes): ${results.skipped}`);
    logProgress(`‚ùå Erreurs: ${results.errors}`);
    logProgress('‚úÖ Extraction tableau termin√©e avec succ√®s !');
    
  } catch (error) {
    logProgress(`‚ùå Erreur fatale: ${error.message}`);
    console.error('‚ùå Erreur d√©taill√©e:', error);
  } finally {
    // Fermer les connexions
    if (scraper) {
      try {
        await scraper.close();
        logProgress('üîö Fermeture du scraper...');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture scraper: ${error.message}`);
      }
    }
    
    if (dbManager) {
      try {
        await dbManager.close();
        logProgress('üîí Connexion base de donn√©es ferm√©e');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture base: ${error.message}`);
      }
    }
  }
}

// Ex√©cution du script
extractTableOnly().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});

