#!/usr/bin/env python3
"""
Test de l'analyse des types de champs existants
V√©rifie que la proc√©dure d√©tecte correctement les incoh√©rences de types
"""

import os
import sys
import tempfile
import shutil
import sqlite3
from pathlib import Path
from addmetric import MetricAdder

def test_field_type_analysis():
    """Test de l'analyse des types de champs existants"""
    print("üß™ TEST DE L'ANALYSE DES TYPES DE CHAMPS EXISTANTS")
    print("=" * 60)
    
    # Cr√©er un environnement de test temporaire
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "test_trendtrack"
        test_path.mkdir()
        
        # Cr√©er la structure de base
        (test_path / "data").mkdir()
        
        # Cr√©er une base de donn√©es de test avec des champs existants
        db_path = test_path / "data" / "trendtrack.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Cr√©er la table shops avec des champs existants
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS shops (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shop_url TEXT UNIQUE NOT NULL,
                shop_name TEXT,
                monthly_visits INTEGER,
                monthly_revenue TEXT,  -- Incoh√©rent: devrait √™tre NUMERIC
                market_us NUMERIC,
                market_uk NUMERIC,
                pixel_google INTEGER,
                pixel_facebook INTEGER
            )
        """)
        
        # Cr√©er la table analytics avec des champs existants
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS analytics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shop_id INTEGER NOT NULL,
                organic_traffic INTEGER,
                bounce_rate NUMERIC,
                conversion_rate TEXT,  -- Incoh√©rent: devrait √™tre NUMERIC
                visits INTEGER,
                traffic INTEGER
            )
        """)
        
        conn.commit()
        conn.close()
        
        # Cr√©er les fichiers de test
        (test_path / "backup_rollback_system.py").write_text("# Test backup system")
        (test_path / "rollback_procedure.py").write_text("# Test rollback procedure")
        
        adder = MetricAdder(str(test_path))
        
        # Test 1: D√©tection d'incoh√©rence dans monthly_*
        print("1Ô∏è‚É£ Test d√©tection d'incoh√©rence monthly_*...")
        try:
            # monthly_visits est INTEGER, monthly_revenue est TEXT
            # Ajouter monthly_profit en NUMERIC devrait d√©tecter l'incoh√©rence
            result = adder._analyze_existing_field_types("monthly_profit", "NUMERIC", "shops")
            print("   ‚úÖ Analyse monthly_* effectu√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur analyse monthly_*: {e}")
            return False
        
        # Test 2: D√©tection d'incoh√©rence dans market_*
        print("2Ô∏è‚É£ Test d√©tection d'incoh√©rence market_*...")
        try:
            # market_us et market_uk sont NUMERIC
            # Ajouter market_fr en INTEGER devrait d√©tecter l'incoh√©rence
            result = adder._analyze_existing_field_types("market_fr", "INTEGER", "shops")
            print("   ‚úÖ Analyse market_* effectu√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur analyse market_*: {e}")
            return False
        
        # Test 3: D√©tection d'incoh√©rence dans pixel_*
        print("3Ô∏è‚É£ Test d√©tection d'incoh√©rence pixel_*...")
        try:
            # pixel_google et pixel_facebook sont INTEGER
            # Ajouter pixel_twitter en TEXT devrait d√©tecter l'incoh√©rence
            result = adder._analyze_existing_field_types("pixel_twitter", "TEXT", "shops")
            print("   ‚úÖ Analyse pixel_* effectu√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur analyse pixel_*: {e}")
            return False
        
        # Test 4: Test de coh√©rence (pas d'incoh√©rence)
        print("4Ô∏è‚É£ Test de coh√©rence (pas d'incoh√©rence)...")
        try:
            # Ajouter un nouveau champ market_* en NUMERIC (coh√©rent)
            result = adder._analyze_existing_field_types("market_de", "NUMERIC", "shops")
            print("   ‚úÖ Analyse de coh√©rence effectu√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur analyse de coh√©rence: {e}")
            return False
        
        # Test 5: Test avec un nouveau pr√©fixe
        print("5Ô∏è‚É£ Test avec un nouveau pr√©fixe...")
        try:
            # Ajouter un champ avec un nouveau pr√©fixe
            result = adder._analyze_existing_field_types("total_products", "INTEGER", "shops")
            print("   ‚úÖ Analyse nouveau pr√©fixe effectu√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur analyse nouveau pr√©fixe: {e}")
            return False
    
    print("‚úÖ TOUS LES TESTS D'ANALYSE R√âUSSIS")
    return True

def test_consistency_detection():
    """Test de d√©tection des incoh√©rences sp√©cifiques"""
    print("\nüß™ TEST DE D√âTECTION DES INCOH√âRENCES")
    print("=" * 60)
    
    with tempfile.TemporaryDirectory() as temp_dir:
        test_path = Path(temp_dir) / "test_trendtrack"
        test_path.mkdir()
        (test_path / "data").mkdir()
        
        # Cr√©er une base de donn√©es avec des incoh√©rences
        db_path = test_path / "data" / "trendtrack.db"
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS shops (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shop_url TEXT,
                monthly_visits INTEGER,
                monthly_revenue TEXT,  -- Incoh√©rent
                market_us NUMERIC,
                market_uk INTEGER,     -- Incoh√©rent
                pixel_google INTEGER,
                pixel_facebook TEXT    -- Incoh√©rent
            )
        """)
        
        conn.commit()
        conn.close()
        
        (test_path / "backup_rollback_system.py").write_text("# Test")
        (test_path / "rollback_procedure.py").write_text("# Test")
        
        adder = MetricAdder(str(test_path))
        
        # Test 1: D√©tecter l'incoh√©rence monthly_revenue
        print("1Ô∏è‚É£ Test d√©tection incoh√©rence monthly_revenue...")
        try:
            result = adder._analyze_existing_field_types("monthly_profit", "NUMERIC", "shops")
            print("   ‚úÖ Incoh√©rence monthly_* d√©tect√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur d√©tection monthly_*: {e}")
            return False
        
        # Test 2: D√©tecter l'incoh√©rence market_uk
        print("2Ô∏è‚É£ Test d√©tection incoh√©rence market_uk...")
        try:
            result = adder._analyze_existing_field_types("market_fr", "NUMERIC", "shops")
            print("   ‚úÖ Incoh√©rence market_* d√©tect√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur d√©tection market_*: {e}")
            return False
        
        # Test 3: D√©tecter l'incoh√©rence pixel_facebook
        print("3Ô∏è‚É£ Test d√©tection incoh√©rence pixel_facebook...")
        try:
            result = adder._analyze_existing_field_types("pixel_twitter", "INTEGER", "shops")
            print("   ‚úÖ Incoh√©rence pixel_* d√©tect√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur d√©tection pixel_*: {e}")
            return False
    
    print("‚úÖ TOUS LES TESTS DE D√âTECTION R√âUSSIS")
    return True

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE DES TESTS D'ANALYSE DES TYPES DE CHAMPS")
    print("=" * 70)
    
    try:
        # Test de l'analyse des types
        analysis_success = test_field_type_analysis()
        
        # Test de d√©tection des incoh√©rences
        detection_success = test_consistency_detection()
        
        if analysis_success and detection_success:
            print("\nüéâ TOUS LES TESTS R√âUSSIS!")
            print("=" * 70)
            print("‚úÖ Tests d'analyse des types: OK")
            print("‚úÖ Tests de d√©tection d'incoh√©rences: OK")
            print("‚úÖ Analyse des types de champs existants fonctionnelle")
            print("=" * 70)
            return 0
        else:
            print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â!")
            print("=" * 70)
            print("üö® L'analyse des types de champs n'est pas fiable")
            print("üîß V√©rifiez les erreurs ci-dessus")
            print("=" * 70)
            return 1
            
    except Exception as e:
        print(f"\nüí• ERREUR CRITIQUE DANS LES TESTS: {e}")
        print("=" * 70)
        print("üö® L'analyse des types de champs n'est pas fonctionnelle")
        print("üîß Intervention manuelle requise")
        print("=" * 70)
        return 1

if __name__ == "__main__":
    sys.exit(main())

