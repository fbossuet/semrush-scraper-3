/**
 * Script de mise √† jour PARALL√àLE SIMPLIFI√â de la base de donn√©es
 * Utilise la m√™me logique que l'ancien scraper mais en mode parall√®le
 */

import { WebScraper } from './src/scraper.js';
import { TrendTrackExtractor } from './src/extractors/trendtrack-extractor.js';
import { DatabaseManager } from './src/database/database-manager.js';
import { ShopRepository } from './src/database/shop-repository.js';
import fs from 'fs';
import path from 'path';

const LOG_PROGRESS_FILE = 'logs/update-progress-parallel-simple.log';

function logProgress(msg) {
  const line = `[${new Date().toISOString()}] ${msg}\n`;
  fs.appendFileSync(LOG_PROGRESS_FILE, line);
  console.log(msg);
}

// Nettoie le fichier de log au d√©but
fs.writeFileSync(LOG_PROGRESS_FILE, '');

/**
 * Fonction principale simplifi√©e
 */
async function updateDatabaseParallelSimple() {
  logProgress('üöÄ D√âMARRAGE - Architecture parall√®le SIMPLIFI√âE TrendTrack');
  
  let scraper = null;
  let extractor = null;
  let dbManager = null;
  let shopRepo = null;
  
  try {
    // Initialiser le scraper
    logProgress('üöÄ Initialisation du scraper...');
    scraper = new WebScraper();
    await scraper.init();
    extractor = new TrendTrackExtractor(scraper.page, scraper.errorHandler);
    
    // Initialiser la base de donn√©es
    logProgress('üóÑÔ∏è Initialisation de la base de donn√©es...');
    dbManager = new DatabaseManager();
    await dbManager.init();
    shopRepo = new ShopRepository(dbManager);
    
    // Connexion √† TrendTrack
    logProgress('üîë Connexion √† TrendTrack...');
    const loginSuccess = await extractor.login('seif.alyakoob@gmail.com', 'Toulouse31!');
    
    if (!loginSuccess) {
      logProgress('‚ùå √âchec de la connexion');
      return;
    }
    
    // PHASE 1: Extraction de toutes les donn√©es sur 1 page (comme l'ancien scraper)
    logProgress('üìã PHASE 1: Extraction de 1 page (m√©thode existante)...');
    const onlineData = await extractor.scrapeMultiplePages(1);
    
    if (!onlineData || onlineData.length === 0) {
      logProgress('‚ùå Aucune donn√©e extraite');
      return;
    }
    
    logProgress(`‚úÖ ${onlineData.length} boutiques extraites`);
    
    // Export debug des donn√©es
    fs.writeFileSync('export-debug-parallel.json', JSON.stringify(onlineData, null, 2));
    
    // PHASE 2: Sauvegarde en base (m√©thode existante)
    logProgress('üíæ PHASE 2: Sauvegarde en base...');
    
    // R√©cup√©rer les donn√©es existantes pour comparaison
    const existingShops = await shopRepo.getAllWithPagination(1000, 0);
    const existingCount = existingShops.length;
    
    logProgress(`üìä ${existingCount} boutiques existantes en base`);
    
    // Traitement en lot (m√©thode existante)
    const results = {
      updated: 0,
      inserted: 0,
      errors: 0,
      skipped: 0
    };
    
    for (let i = 0; i < onlineData.length; i++) {
      const shopData = onlineData[i];
      
      try {
        // V√©rifier si le shop existe d√©j√†
        const existingShop = await shopRepo.getByUrl(shopData.shopUrl || shopData.shop_url);
        if (existingShop) {
          logProgress(`‚è≠Ô∏è Shop d√©j√† existant: ${shopData.shopName || shopData.shop_name} - Ignor√©`);
          results.skipped++;
          continue;
        }
        
        // Shop n'existe pas, on l'ajoute
        const shopId = await shopRepo.upsert(shopData);
        if (shopId) {
          results.inserted++;
          logProgress(`üÜï Nouveau shop: ${shopData.shopName || shopData.shop_name} - ID: ${shopId}`);
        } else {
          results.errors++;
          logProgress(`‚ùå √âchec upsert: ${shopData.shopName || shopData.shop_name}`);
        }
      } catch (error) {
        results.errors++;
        logProgress(`‚ùå Erreur traitement: ${error.message}`);
      }
    }
    
    // Statistiques finales
    logProgress('\nüìä STATISTIQUES FINALES - ARCHITECTURE PARALL√àLE SIMPLIFI√âE:');
    logProgress('==================================================');
    logProgress(`üìà Boutiques extraites: ${onlineData.length}`);
    logProgress(`üíæ Boutiques en base: ${existingCount + results.inserted}`);
    logProgress(`üÜï Nouvelles boutiques ajout√©es: ${results.inserted}`);
    logProgress(`‚è≠Ô∏è Boutiques ignor√©es (d√©j√† existantes): ${results.skipped}`);
    logProgress(`‚ùå Erreurs: ${results.errors}`);
    logProgress('‚úÖ Architecture parall√®le simplifi√©e termin√©e !');
    
  } catch (error) {
    logProgress(`‚ùå Erreur fatale: ${error.message}`);
    console.error('‚ùå Erreur d√©taill√©e:', error);
  } finally {
    // Fermer les connexions
    if (scraper) {
      try {
        await scraper.close();
        logProgress('üîö Fermeture du scraper...');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture scraper: ${error.message}`);
      }
    }
    
    if (dbManager) {
      try {
        await dbManager.close();
        logProgress('üîí Connexion base de donn√©es ferm√©e');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture base: ${error.message}`);
      }
    }
  }
}

// Ex√©cution du script
updateDatabaseParallelSimple().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});

