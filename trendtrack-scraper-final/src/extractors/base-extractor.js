/**
 * Extracteur de base pour le scraper
 * Fournit les fonctionnalit√©s communes √† tous les extracteurs
 */

import { ErrorHandler } from '../utils/error-handler.js';
import { optimizationConfig } from '../config.js';

export class BaseExtractor {
  constructor(page, errorHandler) {
    this.page = page;
    this.errorHandler = errorHandler || new ErrorHandler();
  }

  /**
   * Extrait des donn√©es selon des s√©lecteurs
   * @param {Object} selectors - S√©lecteurs CSS
   * @param {string} context - Contexte de l'extraction
   * @returns {Promise<Object>} - Donn√©es extraites
   */
  async extractData(selectors, context = 'default') {
    return this.errorHandler.handleExtraction(async () => {
      console.log(`üìä Extraction ${context}...`);
      
      const extractedData = {};
      
      for (const [key, selector] of Object.entries(selectors)) {
        console.log(`üîç Extraction: ${key}...`);
        
        try {
          if (selector.multiple) {
            // Pour r√©cup√©rer plusieurs √©l√©ments
            const attributeName = selector.attribute;
            extractedData[key] = await this.page.$$eval(selector.selector, (elements, attr) =>
              elements.map(el => {
                if (attr) {
                  return el.getAttribute(attr);
                } else {
                  return el.textContent.trim();
                }
              }).filter(text => text && text.trim())
            , attributeName);
          } else {
            // Pour r√©cup√©rer un seul √©l√©ment
            const element = await this.page.$(selector.selector);
            if (element) {
              if (selector.attribute) {
                extractedData[key] = await element.getAttribute(selector.attribute);
              } else {
                extractedData[key] = await element.textContent();
              }
            } else {
              extractedData[key] = null;
              console.log(`‚ö†Ô∏è √âl√©ment non trouv√© pour: ${key}`);
            }
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Erreur extraction ${key}: ${error.message}`);
          extractedData[key] = null;
        }
      }
      
      console.log(`‚úÖ Extraction ${context} termin√©e`);
      return extractedData;
      
    }, context, this.page.url(), optimizationConfig.interfaces[context]?.timeout || 30000);
  }

  /**
   * Extrait des donn√©es avec validation
   * @param {Object} selectors - S√©lecteurs CSS
   * @param {Object} validationRules - R√®gles de validation
   * @param {string} context - Contexte de l'extraction
   * @returns {Promise<Object>} - Donn√©es extraites et valid√©es
   */
  async extractWithValidation(selectors, validationRules, context = 'default') {
    const data = await this.extractData(selectors, context);
    const validation = this.validateData(data, validationRules);
    
    if (!validation.isValid) {
      return this.errorHandler.handleValidationError(validation, context);
    }
    
    return {
      success: true,
      data,
      validation,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * Valide des donn√©es selon des r√®gles
   * @param {Object} data - Donn√©es √† valider
   * @param {Object} validationRules - R√®gles de validation
   * @returns {Object} - R√©sultat de validation
   */
  validateData(data, validationRules) {
    const validation = {
      isValid: true,
      errors: [],
      warnings: []
    };

    for (const [field, rules] of Object.entries(validationRules)) {
      const value = data[field];
      
      // V√©rifier si le champ est requis
      if (rules.required && (!value || value.trim() === '')) {
        validation.isValid = false;
        validation.errors.push(`Champ requis manquant: ${field}`);
        continue;
      }
      
      // V√©rifier le pattern si sp√©cifi√©
      if (rules.pattern && value) {
        const pattern = optimizationConfig.validation.patterns[rules.pattern];
        if (pattern && !pattern.test(value)) {
          validation.isValid = false;
          validation.errors.push(`Format invalide pour ${field}: ${value}`);
        }
      }
      
      // V√©rifier la longueur si sp√©cifi√©e
      if (rules.minLength && value && value.length < rules.minLength) {
        validation.warnings.push(`${field} trop court: ${value.length} < ${rules.minLength}`);
      }
      
      if (rules.maxLength && value && value.length > rules.maxLength) {
        validation.warnings.push(`${field} trop long: ${value.length} > ${rules.maxLength}`);
      }
    }

    return validation;
  }

  /**
   * Extrait des m√©triques selon des patterns
   * @param {string} pageText - Texte de la page
   * @param {Array} metricPatterns - Patterns de m√©triques
   * @param {string} prefix - Pr√©fixe pour les logs
   * @returns {Object} - M√©triques extraites
   */
  extractMetrics(pageText, metricPatterns, prefix = 'üìä') {
    const metrics = {};
    
    for (const [metricName, pattern] of Object.entries(metricPatterns)) {
      try {
        const match = pageText.match(pattern);
        if (match) {
          metrics[metricName] = match[1] || match[0];
          console.log(`${prefix} ${metricName}: ${metrics[metricName]}`);
        } else {
          metrics[metricName] = null;
          console.log(`${prefix} ${metricName}: Non trouv√©`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è Erreur extraction m√©trique ${metricName}: ${error.message}`);
        metrics[metricName] = null;
      }
    }
    
    return metrics;
  }

  /**
   * Attend qu'un √©l√©ment soit pr√©sent
   * @param {string} selector - S√©lecteur CSS
   * @param {number} timeout - Timeout en millisecondes
   * @returns {Promise<boolean>} - √âl√©ment trouv√©
   */
  async waitForElement(selector, timeout = 5000) {
    try {
      await this.page.waitForSelector(selector, { timeout });
      console.log(`‚úÖ √âl√©ment trouv√©: ${selector}`);
      return true;
    } catch (error) {
      console.log(`‚ö†Ô∏è √âl√©ment non trouv√©: ${selector}`);
      return false;
    }
  }

  /**
   * Attend que plusieurs √©l√©ments soient pr√©sents
   * @param {Array} selectors - S√©lecteurs CSS
   * @param {number} timeout - Timeout en millisecondes
   * @returns {Promise<Array>} - √âl√©ments trouv√©s
   */
  async waitForElements(selectors, timeout = 5000) {
    const results = [];
    
    for (const selector of selectors) {
      const found = await this.waitForElement(selector, timeout);
      results.push({ selector, found });
    }
    
    return results;
  }

  /**
   * Prend une capture d'√©cran
   * @param {string} filename - Nom du fichier
   * @param {string} directory - R√©pertoire de sauvegarde
   * @returns {Promise<string>} - Chemin du fichier
   */
  async takeScreenshot(filename, directory = 'screenshots') {
    try {
      const fs = await import('fs/promises');
      await fs.mkdir(directory, { recursive: true });
      const filepath = `${directory}/${filename}`;
      
      await this.page.screenshot({ 
        path: filepath,
        fullPage: true,
        timeout: 10000
      });
      
      console.log(`üì∏ Screenshot sauvegard√©: ${filepath}`);
      return filepath;
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur screenshot: ${error.message}`);
      return null;
    }
  }

  /**
   * Formate les r√©sultats pour l'affichage
   * @param {Object} results - R√©sultats √† formater
   * @returns {string} - R√©sultats format√©s
   */
  formatResults(results) {
    if (!results || !results.data) {
      return '‚ùå Aucune donn√©e disponible';
    }

    const lines = ['üìã R√âSULTATS:'];
    
    for (const [key, value] of Object.entries(results.data)) {
      if (Array.isArray(value)) {
        lines.push(`   ${key}: ${value.length} √©l√©ments`);
        value.slice(0, 3).forEach((item, index) => {
          lines.push(`     ${index + 1}. ${item}`);
        });
        if (value.length > 3) {
          lines.push(`     ... et ${value.length - 3} autres`);
        }
      } else {
        lines.push(`   ${key}: ${value || 'Non trouv√©'}`);
      }
    }
    
    return lines.join('\n');
  }

  /**
   * Nettoie les donn√©es extraites
   * @param {Object} data - Donn√©es √† nettoyer
   * @returns {Object} - Donn√©es nettoy√©es
   */
  cleanData(data) {
    const cleaned = {};
    
    for (const [key, value] of Object.entries(data)) {
      if (typeof value === 'string') {
        cleaned[key] = value.trim().replace(/\s+/g, ' ');
      } else if (Array.isArray(value)) {
        cleaned[key] = value.map(item => 
          typeof item === 'string' ? item.trim().replace(/\s+/g, ' ') : item
        ).filter(item => item && item.trim());
      } else {
        cleaned[key] = value;
      }
    }
    
    return cleaned;
  }
} 