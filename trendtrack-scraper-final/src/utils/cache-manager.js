/**
 * Module de cache intelligent pour optimiser les performances
 * M√©morise les r√©sultats d'extraction et √©vite les re-extractions inutiles
 */

import fs from 'fs/promises';
import path from 'path';
import { optimizationConfig } from '../config.js';

export class CacheManager {
  constructor() {
    this.cacheDir = 'cache';
    this.cacheData = new Map();
    this.stats = {
      hits: 0,
      misses: 0,
      saves: 0,
      invalidations: 0
    };
  }

  /**
   * Initialise le cache et charge les donn√©es existantes
   */
  async initialize() {
    try {
      await fs.mkdir(this.cacheDir, { recursive: true });
      await this.loadCache();
      console.log('‚úÖ Cache intelligent initialis√©');
    } catch (error) {
      console.log('‚ö†Ô∏è Cache non initialis√©, utilisation en m√©moire uniquement');
    }
  }

  /**
   * G√©n√®re une cl√© de cache pour un URL et un type de donn√©es
   * @param {string} url - URL de la page
   * @param {string} dataType - Type de donn√©es (overview, details, list)
   * @returns {string} - Cl√© de cache
   */
  generateCacheKey(url, dataType) {
    const cleanUrl = url.replace(/^https?:\/\//, '').replace(/\/$/, '');
    return `${cleanUrl}_${dataType}`;
  }

  /**
   * V√©rifie si des donn√©es sont disponibles en cache
   * @param {string} url - URL de la page
   * @param {string} dataType - Type de donn√©es
   * @returns {Object|null} - Donn√©es en cache ou null
   */
  async getCachedData(url, dataType) {
    const key = this.generateCacheKey(url, dataType);
    
    // V√©rifier en m√©moire d'abord
    if (this.cacheData.has(key)) {
      const cached = this.cacheData.get(key);
      if (this.isValid(cached)) {
        this.stats.hits++;
        console.log(`üéØ Cache HIT: ${url} (${dataType})`);
        return cached.data;
      } else {
        this.cacheData.delete(key);
        this.stats.invalidations++;
      }
    }

    // V√©rifier sur disque
    try {
      const filePath = path.join(this.cacheDir, `${key}.json`);
      const fileContent = await fs.readFile(filePath, 'utf8');
      const cached = JSON.parse(fileContent);
      
      if (this.isValid(cached)) {
        this.cacheData.set(key, cached);
        this.stats.hits++;
        console.log(`üéØ Cache HIT (disque): ${url} (${dataType})`);
        return cached.data;
      } else {
        await fs.unlink(filePath);
        this.stats.invalidations++;
      }
    } catch (error) {
      // Fichier n'existe pas ou erreur de lecture
    }

    this.stats.misses++;
    console.log(`‚ùå Cache MISS: ${url} (${dataType})`);
    return null;
  }

  /**
   * Sauvegarde des donn√©es en cache
   * @param {string} url - URL de la page
   * @param {string} dataType - Type de donn√©es
   * @param {Object} data - Donn√©es √† sauvegarder
   */
  async setCachedData(url, dataType, data) {
    const key = this.generateCacheKey(url, dataType);
    const cacheEntry = {
      url,
      dataType,
      data,
      timestamp: new Date().toISOString(),
      ttl: this.getTTL(dataType)
    };

    // Sauvegarder en m√©moire
    this.cacheData.set(key, cacheEntry);

    // Sauvegarder sur disque
    try {
      const filePath = path.join(this.cacheDir, `${key}.json`);
      await fs.writeFile(filePath, JSON.stringify(cacheEntry, null, 2));
      this.stats.saves++;
      console.log(`üíæ Cache SAVE: ${url} (${dataType})`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur sauvegarde cache: ${error.message}`);
    }
  }

  /**
   * V√©rifie si une entr√©e de cache est valide
   * @param {Object} cached - Entr√©e de cache
   * @returns {boolean} - True si valide
   */
  isValid(cached) {
    if (!cached || !cached.timestamp || !cached.ttl) {
      return false;
    }

    const age = new Date().toISOString() - cached.timestamp;
    return age < cached.ttl;
  }

  /**
   * R√©cup√®re le TTL (Time To Live) pour un type de donn√©es
   * @param {string} dataType - Type de donn√©es
   * @returns {number} - TTL en millisecondes
   */
  getTTL(dataType) {
    const config = optimizationConfig.cache.interfaces[dataType];
    return config ? config.maxAge : 30 * 60 * 1000; // 30 minutes par d√©faut
  }

  /**
   * Charge le cache depuis le disque
   */
  async loadCache() {
    try {
      const files = await fs.readdir(this.cacheDir);
      
      for (const file of files) {
        if (file.endsWith('.json')) {
          try {
            const filePath = path.join(this.cacheDir, file);
            const content = await fs.readFile(filePath, 'utf8');
            const cached = JSON.parse(content);
            
            if (this.isValid(cached)) {
              const key = this.generateCacheKey(cached.url, cached.dataType);
              this.cacheData.set(key, cached);
            } else {
              // Supprimer les entr√©es expir√©es
              await fs.unlink(filePath);
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è Erreur chargement cache ${file}: ${error.message}`);
          }
        }
      }
      
      console.log(`üì¶ Cache charg√©: ${this.cacheData.size} entr√©es valides`);
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur chargement cache:', error.message);
    }
  }

  /**
   * Nettoie le cache (supprime les entr√©es expir√©es)
   */
  async cleanup() {
    const toDelete = [];
    
    for (const [key, cached] of this.cacheData.entries()) {
      if (!this.isValid(cached)) {
        toDelete.push(key);
      }
    }
    
    for (const key of toDelete) {
      this.cacheData.delete(key);
      try {
        const filePath = path.join(this.cacheDir, `${key}.json`);
        await fs.unlink(filePath);
      } catch (error) {
        // Fichier d√©j√† supprim√©
      }
    }
    
    console.log(`üßπ Cache nettoy√©: ${toDelete.length} entr√©es supprim√©es`);
  }

  /**
   * Affiche les statistiques du cache
   */
  printStats() {
    console.log('üìä Statistiques Cache:');
    console.log(`   Hits: ${this.stats.hits}`);
    console.log(`   Misses: ${this.stats.misses}`);
    console.log(`   Saves: ${this.stats.saves}`);
    console.log(`   Invalidations: ${this.stats.invalidations}`);
    console.log(`   Entr√©es en m√©moire: ${this.cacheData.size}`);
  }

  /**
   * Vide compl√®tement le cache
   */
  async clear() {
    this.cacheData.clear();
    this.stats = { hits: 0, misses: 0, saves: 0, invalidations: 0 };
    
    try {
      const files = await fs.readdir(this.cacheDir);
      for (const file of files) {
        if (file.endsWith('.json')) {
          await fs.unlink(path.join(this.cacheDir, file));
        }
      }
      console.log('üóëÔ∏è Cache vid√© compl√®tement');
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur vidage cache:', error.message);
    }
  }
} 