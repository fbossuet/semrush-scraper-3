/**
 * Script d'extraction avec les S√âLECTEURS QUI FONCTIONNENT
 * Utilise exactement les m√™mes s√©lecteurs que le scraper original
 */

import { WebScraper } from './src/scraper.js';
import { TrendTrackExtractor } from './src/extractors/trendtrack-extractor.js';
import { DatabaseManager } from './src/database/database-manager.js';
import { ShopRepository } from './src/database/shop-repository.js';
import fs from 'fs';

const LOG_PROGRESS_FILE = 'logs/extract-table-working-selectors.log';

function logProgress(msg) {
  const line = `[${new Date().toISOString()}] ${msg}\n`;
  fs.appendFileSync(LOG_PROGRESS_FILE, line);
  console.log(msg);
}

// Nettoie le fichier de log au d√©but
fs.writeFileSync(LOG_PROGRESS_FILE, '');

async function extractTableWithWorkingSelectors() {
  logProgress('üöÄ EXTRACTION AVEC S√âLECTEURS QUI FONCTIONNENT - D√©marrage');
  
  let scraper = null;
  let extractor = null;
  let dbManager = null;
  let shopRepo = null;
  
  try {
    // Initialiser le scraper
    logProgress('üöÄ Initialisation du scraper...');
    scraper = new WebScraper();
    await scraper.init();
    extractor = new TrendTrackExtractor(scraper.page, scraper.errorHandler);
    
    // Initialiser la base de donn√©es
    logProgress('üóÑÔ∏è Initialisation de la base de donn√©es...');
    dbManager = new DatabaseManager();
    await dbManager.init();
    shopRepo = new ShopRepository(dbManager);
    
    // Connexion √† TrendTrack
    logProgress('üîë Connexion √† TrendTrack...');
    const loginSuccess = await extractor.login('seif.alyakoob@gmail.com', 'Toulouse31!');
    
    if (!loginSuccess) {
      logProgress('‚ùå √âchec de la connexion');
      return;
    }
    
    // Navigation vers la page 1
    logProgress('üìã Navigation vers la page 1...');
    const navSuccess = await extractor.navigateToTrendingShops(1);
    if (!navSuccess) {
      logProgress('‚ùå Navigation √©chou√©e');
      return;
    }
    
    // Attendre que le tableau soit charg√©
    await extractor.page.waitForSelector('tbody tr', { timeout: 60000 });
    
    // R√©cup√©rer toutes les lignes du tableau
    const rows = await extractor.page.locator('tbody tr').all();
    logProgress(`üìä ${rows.length} lignes trouv√©es dans le tableau`);
    
    const shopsData = [];
    
    // Extraire chaque ligne avec les S√âLECTEURS QUI FONCTIONNENT
    for (let i = 0; i < rows.length; i++) {
      logProgress(`üîç Extraction ligne ${i + 1}/${rows.length}...`);
      
      try {
        const row = rows[i];
        const cells = await row.locator('td').all();
        if (cells.length < 8) {
          logProgress(`‚ö†Ô∏è Ligne avec seulement ${cells.length} cellules, ignor√©e`);
          continue;
        }

        const shopData = {};
        
        // 1. EXTRACTION INFO BOUTIQUE (cellule 1) - S√âLECTEURS QUI FONCTIONNENT
        try {
          const shopInfoHtml = await cells[1].innerHTML();
          const shopNameMatch = shopInfoHtml.match(/<p class=\"text-sm font-semibold\">([^<]+)<\/p>/);
          shopData.shopName = shopNameMatch ? shopNameMatch[1].trim() : '';
          const shopUrlMatch = shopInfoHtml.match(/href=["']([^"']+)["']/);
          shopData.shopUrl = shopUrlMatch ? shopUrlMatch[1] : '';
          const dateMatch = shopInfoHtml.match(/(\d{2}\/\d{2}\/\d{4})/);
          shopData.creationDate = dateMatch ? dateMatch[1] : '';
        } catch (error) {
          logProgress(`‚ö†Ô∏è Erreur extraction info boutique: ${error.message}`);
          shopData.shopName = '';
          shopData.shopUrl = '';
          shopData.creationDate = '';
        }
        
        // 2. EXTRACTION NOMBRE DE PRODUITS (cellule 2) - S√âLECTEURS QUI FONCTIONNENT
        try {
          const productsCell = cells[2];
          const productsP = productsCell.locator("p:has(> span:has-text(\"products\"))");
          const productsText = await productsP.textContent();
          if (productsText) {
            const match = productsText.match(/\d[\d\s.,]*/);
            shopData.totalProducts = match ? Number(match[0].replace(/[^\d]/g, "")) : null;
            logProgress(`üì¶ Produits extraits pour ${shopData.shopName}: ${shopData.totalProducts}`);
          } else {
            shopData.totalProducts = null;
          }
        } catch (error) {
          logProgress(`‚ö†Ô∏è Erreur extraction produits pour ${shopData.shopName}: ${error.message}`);
          shopData.totalProducts = null;
        }
        
        // 3. EXTRACTION M√âTRIQUES DE BASE (cellules 3, 4, 5) - S√âLECTEURS QUI FONCTIONNENT
        try {
          shopData.category = (await cells[3].textContent()).trim();
          shopData.monthlyVisits = (await cells[4].textContent()).trim();
          shopData.monthlyRevenue = (await cells[5].textContent()).trim();
        } catch (error) {
          logProgress(`‚ö†Ô∏è Erreur extraction m√©triques de base: ${error.message}`);
          shopData.category = '';
          shopData.monthlyVisits = '';
          shopData.monthlyRevenue = '';
        }
        
        // 4. EXTRACTION LIVE ADS (cellule 7) - S√âLECTEURS QUI FONCTIONNENT
        try {
          const liveAdsDiv = await cells[7].locator('div.flex.items-center.justify-center.font-semibold');
          const liveAdsP = await liveAdsDiv.locator('p').first();
          shopData.liveAds = liveAdsP ? (await liveAdsP.textContent()).trim() : '';
        } catch (error) {
          logProgress(`‚ö†Ô∏è Erreur extraction Live Ads: ${error.message}`);
          shopData.liveAds = '';
        }

        // Ajouter les m√©tadonn√©es
        shopData.scraping_status = 'table_extracted';
        shopData.last_updated = new Date().toISOString();

        // V√©rifier qu'on a au moins le nom et l'URL
        if (!shopData.shopName || !shopData.shopUrl) {
          logProgress('‚ö†Ô∏è Donn√©es insuffisantes pour la boutique');
          continue;
        }

        logProgress(`‚úÖ Boutique extraite: ${shopData.shopName} (${shopData.shopUrl})`);
        shopsData.push(shopData);
        
      } catch (error) {
        logProgress(`‚ùå Erreur extraction ligne ${i + 1}: ${error.message}`);
        continue;
      }
      
      // Pause minimale entre les extractions
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    logProgress(`\nüìä R√âSULTATS EXTRACTION:`);
    logProgress(`‚úÖ ${shopsData.length} boutiques extraites du tableau`);
    
    // Sauvegarde imm√©diate en base
    logProgress('\nüíæ Sauvegarde en base...');
    
    const results = {
      inserted: 0,
      skipped: 0,
      errors: 0
    };
    
    for (const shopData of shopsData) {
      try {
        // V√©rifier si le shop existe d√©j√†
        const existingShop = await shopRepo.getByUrl(shopData.shopUrl);
        if (existingShop) {
          logProgress(`‚è≠Ô∏è Shop d√©j√† existant: ${shopData.shopName} - Ignor√©`);
          results.skipped++;
          continue;
        }
        
        // Shop n'existe pas, on l'ajoute
        const shopId = await shopRepo.upsert(shopData);
        if (shopId) {
          results.inserted++;
          logProgress(`üÜï Nouveau shop: ${shopData.shopName} - ID: ${shopId}`);
        } else {
          results.errors++;
          logProgress(`‚ùå √âchec upsert: ${shopData.shopName}`);
        }
      } catch (error) {
        results.errors++;
        logProgress(`‚ùå Erreur traitement: ${error.message}`);
      }
    }
    
    // Export debug des donn√©es
    fs.writeFileSync('export-table-working-selectors.json', JSON.stringify(shopsData, null, 2));
    
    // Statistiques finales
    logProgress('\nüìä STATISTIQUES FINALES:');
    logProgress('==================================================');
    logProgress(`üìã Boutiques extraites du tableau: ${shopsData.length}`);
    logProgress(`üÜï Nouvelles boutiques ajout√©es: ${results.inserted}`);
    logProgress(`‚è≠Ô∏è Boutiques ignor√©es (d√©j√† existantes): ${results.skipped}`);
    logProgress(`‚ùå Erreurs: ${results.errors}`);
    logProgress('‚úÖ Extraction avec s√©lecteurs qui fonctionnent termin√©e !');
    
  } catch (error) {
    logProgress(`‚ùå Erreur fatale: ${error.message}`);
    console.error('‚ùå Erreur d√©taill√©e:', error);
  } finally {
    // Fermer les connexions
    if (scraper) {
      try {
        await scraper.close();
        logProgress('üîö Fermeture du scraper...');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture scraper: ${error.message}`);
      }
    }
    
    if (dbManager) {
      try {
        await dbManager.close();
        logProgress('üîí Connexion base de donn√©es ferm√©e');
      } catch (error) {
        logProgress(`‚ö†Ô∏è  Erreur fermeture base: ${error.message}`);
      }
    }
  }
}

// Ex√©cution du script
extractTableWithWorkingSelectors().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
});
