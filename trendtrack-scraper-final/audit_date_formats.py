#!/usr/bin/env python3
"""
Script d'audit des formats de dates dans tout le code
V√©rifie que toutes les dates sont au format ISO 8601 UTC
"""

import os
import re
import sqlite3
from pathlib import Path
from datetime import datetime, timezone

def audit_date_formats():
    print("üîç AUDIT DES FORMATS DE DATES")
    print("=" * 80)
    
    # Chemins √† auditer
    paths_to_audit = [
        "ubuntu/trendtrack-scraper-final/",
        "ubuntu/sem-scraper-final/",
        "ubuntu/trendtrack-scraper-final/src/",
        "ubuntu/trendtrack-scraper-final/scrapers/",
        "ubuntu/trendtrack-scraper-final/python_bridge/"
    ]
    
    # Patterns √† rechercher
    date_patterns = {
        "datetime.now(timezone.utc)": r"datetime\.now\(\)",
        "datetime.now(timezone.utc).isoformat()": r"datetime.now(timezone.utc).isoformat()",
        "new Date().toISOString()": r"new Date\(\)",
        "new Date().toISOString()": r"Date\.now\(\)",
        "toISOString()": r"\.toISOString\(\)",
        "strftime": r"strftime\(",
        "strptime": r"strptime\(",
        "timestamp": r"timestamp",
        "created_at": r"created_at",
        "updated_at": r"updated_at",
        "scraped_at": r"scraped_at",
        "creation_date": r"creation_date",
        "year_founded": r"year_founded"
    }
    
    issues_found = []
    
    print("üìÅ 1. AUDIT DES FICHIERS DE CODE")
    print("-" * 40)
    
    for path in paths_to_audit:
        if not os.path.exists(path):
            print(f"‚ö†Ô∏è  Chemin non trouv√©: {path}")
            continue
            
        print(f"\nüîç Audit de: {path}")
        
        for root, dirs, files in os.walk(path):
            for file in files:
                if file.endswith(('.py', '.js', '.sql')):
                    file_path = os.path.join(root, file)
                    audit_file(file_path, date_patterns, issues_found)
    
    print("\nüìä 2. AUDIT DE LA BASE DE DONN√âES")
    print("-" * 40)
    
    audit_database_dates(issues_found)
    
    print("\nüìã 3. R√âSUM√â DES PROBL√àMES")
    print("-" * 40)
    
    if issues_found:
        for i, issue in enumerate(issues_found, 1):
            print(f"{i}. {issue}")
    else:
        print("‚úÖ Aucun probl√®me de format de date d√©tect√©!")
    
    print("\nüéØ 4. RECOMMANDATIONS")
    print("-" * 40)
    print("‚úÖ Format recommand√©: ISO 8601 UTC (ex: '2025-09-18T10:30:45.123Z')")
    print("‚úÖ Python: datetime.now(timezone.utc).isoformat()")
    print("‚úÖ JavaScript: new Date().toISOString()")
    print("‚úÖ SQLite: TEXT avec format ISO 8601")

def audit_file(file_path, date_patterns, issues_found):
    """Audite un fichier pour les formats de dates"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
            
        for line_num, line in enumerate(lines, 1):
            for pattern_name, pattern in date_patterns.items():
                if re.search(pattern, line):
                    # V√©rifier si c'est un format ISO 8601
                    if not is_iso8601_format(line):
                        issue = f"{file_path}:{line_num} - {pattern_name} d√©tect√©: {line.strip()}"
                        issues_found.append(issue)
                        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'audit de {file_path}: {e}")

def is_iso8601_format(line):
    """V√©rifie si la ligne utilise le format ISO 8601"""
    iso_patterns = [
        r"\.isoformat\(\)",
        r"\.toISOString\(\)",
        r"ISO.*8601",
        r"UTC.*timestamp",
        r"timezone\.utc"
    ]
    
    for pattern in iso_patterns:
        if re.search(pattern, line, re.IGNORECASE):
            return True
    return False

def audit_database_dates(issues_found):
    """Audite les dates dans la base de donn√©es"""
    db_path = "ubuntu/trendtrack-scraper-final/data/trendtrack.db"
    
    if not os.path.exists(db_path):
        print(f"‚ö†Ô∏è  Base de donn√©es non trouv√©e: {db_path}")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier la structure des tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            if table_name in ['shops', 'analytics']:
                audit_table_dates(cursor, table_name, issues_found)
                
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'audit de la base de donn√©es: {e}")

def audit_table_dates(cursor, table_name, issues_found):
    """Audite les dates dans une table sp√©cifique"""
    print(f"\nüìä Table: {table_name}")
    
    # Obtenir la structure de la table
    cursor.execute(f"PRAGMA table_info({table_name});")
    columns = cursor.fetchall()
    
    date_columns = []
    for col in columns:
        col_name = col[1]
        col_type = col[2]
        if 'date' in col_name.lower() or 'time' in col_name.lower() or col_type == 'TEXT':
            date_columns.append(col_name)
    
    if date_columns:
        print(f"  Colonnes de dates: {', '.join(date_columns)}")
        
        # V√©rifier quelques exemples de donn√©es
        for col in date_columns:
            cursor.execute(f"SELECT DISTINCT {col} FROM {table_name} WHERE {col} IS NOT NULL LIMIT 5;")
            samples = cursor.fetchall()
            
            if samples:
                print(f"  Exemples {col}:")
                for sample in samples:
                    value = sample[0]
                    if value:
                        print(f"    - {value}")
                        if not is_valid_iso8601(str(value)):
                            issues_found.append(f"Base de donn√©es - {table_name}.{col}: Format non ISO 8601: {value}")

def is_valid_iso8601(date_string):
    """V√©rifie si une cha√Æne est au format ISO 8601 valide"""
    try:
        # Patterns ISO 8601
        iso_patterns = [
            r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z?$',  # 2025-09-18T10:30:45.123Z
            r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$',              # 2025-09-18T10:30:45Z
            r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$'                # 2025-09-18T10:30:45
        ]
        
        for pattern in iso_patterns:
            if re.match(pattern, date_string):
                return True
        return False
    except:
        return False

if __name__ == "__main__":
    audit_date_formats()
