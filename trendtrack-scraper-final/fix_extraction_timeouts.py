#!/usr/bin/env python3
"""
Fix pour les timeouts d'extraction dans extractShopData
Date: 2025-09-19
Description: Am√©liore la robustesse de l'extraction des donn√©es de boutique
"""

import os
import shutil
from datetime import datetime

def backup_and_fix_extraction():
    """Sauvegarde et corrige la m√©thode extractShopData"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    js_file = "src/extractors/trendtrack-extractor.js"
    
    # Sauvegarde
    backup_file = f"{js_file}.backup_{timestamp}"
    shutil.copy2(js_file, backup_file)
    print(f"‚úÖ Sauvegarde cr√©√©e: {backup_file}")
    
    # Lire le fichier
    with open(js_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Remplacer la logique d'extraction avec timeout r√©duit
    old_logic = '''      // üÜï Extraire l'ID de la boutique depuis l'attribut id de la ligne (via outerHTML pour √©viter les timeouts)
      const rowHtml = await row.evaluate(el => el.outerHTML);
      const rowIdMatch = rowHtml.match(/<tr[^>]*id=["']([^"']+)["']/);
      const rowId = rowIdMatch ? rowIdMatch[1] : null;
      shopData.shopId = rowId;'''
    
    new_logic = '''      // üÜï Extraire l'ID de la boutique avec timeout r√©duit
      let rowId = null;
      try {
        const rowHtml = await row.evaluate(el => el.outerHTML, { timeout: 10000 });
        const rowIdMatch = rowHtml.match(/<tr[^>]*id=["']([^"']+)["']/);
        rowId = rowIdMatch ? rowIdMatch[1] : null;
      } catch (error) {
        console.log(`‚ö†Ô∏è Timeout extraction ID ligne, utilisation de l'index`);
        rowId = `row_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      }
      shopData.shopId = rowId;'''
    
    # Remplacer la logique
    if old_logic in content:
        content = content.replace(old_logic, new_logic)
        
        # √âcrire le fichier mis √† jour
        with open(js_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ {js_file} corrig√© avec timeout r√©duit")
        return True
    else:
        print(f"‚ö†Ô∏è Logique d'extraction non trouv√©e dans {js_file}")
        return False

def main():
    """Fonction principale"""
    print("üîß Fix des timeouts d'extraction")
    print("=" * 40)
    
    if not os.path.exists("src/extractors/trendtrack-extractor.js"):
        print("‚ùå Veuillez ex√©cuter ce script depuis le r√©pertoire trendtrack-scraper-final")
        return
    
    try:
        if backup_and_fix_extraction():
            print("\nüéâ Fix termin√© avec succ√®s !")
            print("\nüìã Am√©liorations apport√©es:")
            print("  ‚úÖ Timeout r√©duit pour extractShopData (10s au lieu de 30s)")
            print("  ‚úÖ Gestion d'erreur avec ID de fallback")
            print("  ‚úÖ Logs d'erreur plus clairs")
            
            print("\nüîß Prochaines √©tapes:")
            print("  1. Red√©marrer le scraper")
            print("  2. V√©rifier les logs d'extraction")
            print("  3. Valider la stabilit√©")
        else:
            print("‚ùå √âchec du fix")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du fix: {e}")

if __name__ == "__main__":
    main()

