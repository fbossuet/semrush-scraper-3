#!/usr/bin/env python3
"""
Syst√®me de sauvegarde et rollback pour TrendTrack Scraper
Permet de sauvegarder et restaurer l'√©tat du syst√®me avant modifications majeures
"""

import os
import shutil
import sqlite3
import json
import datetime
import subprocess
from pathlib import Path
from typing import Dict, List, Optional
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class BackupRollbackSystem:
    """Syst√®me de sauvegarde et rollback complet"""
    
    def __init__(self, base_path: str = "/home/ubuntu/trendtrack-scraper-final"):
        self.base_path = Path(base_path)
        self.backup_dir = self.base_path / "backups"
        self.backup_dir.mkdir(exist_ok=True)
        
        # Fichiers critiques √† sauvegarder
        self.critical_files = [
            "smart_scraper_intelligent.py",
            "scrapers/domain_search/domain_scraper.py",
            "scrapers/traditional/smart_scraper_intelligent.py",
            "data/trendtrack.db",
            "data/trendtrack_test.db",
            "trendtrack_api.py",
            "database_manager.py",
            "domains_to_search.py"
        ]
        
        # R√©pertoires critiques
        self.critical_dirs = [
            "scrapers/",
            "auth/",
            "browser/",
            "config/",
            "utils/"
        ]
    
    def create_backup(self, backup_name: str = None) -> str:
        """
        Cr√©e une sauvegarde compl√®te du syst√®me
        
        Args:
            backup_name: Nom de la sauvegarde (optionnel)
            
        Returns:
            str: Chemin vers la sauvegarde cr√©√©e
        """
        if not backup_name:
            timestamp = datetime.datetime.now(timezone.utc).isoformat()
            backup_name = f"backup_{timestamp}"
        
        backup_path = self.backup_dir / backup_name
        backup_path.mkdir(exist_ok=True)
        
        logger.info(f"üîÑ Cr√©ation de la sauvegarde: {backup_name}")
        
        # 1. Sauvegarder les fichiers critiques
        files_backup_dir = backup_path / "files"
        files_backup_dir.mkdir(exist_ok=True)
        
        for file_path in self.critical_files:
            source = self.base_path / file_path
            if source.exists():
                dest = files_backup_dir / file_path
                dest.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source, dest)
                logger.info(f"  ‚úÖ Fichier sauvegard√©: {file_path}")
            else:
                logger.warning(f"  ‚ö†Ô∏è Fichier non trouv√©: {file_path}")
        
        # 2. Sauvegarder les r√©pertoires critiques
        dirs_backup_dir = backup_path / "directories"
        dirs_backup_dir.mkdir(exist_ok=True)
        
        for dir_path in self.critical_dirs:
            source = self.base_path / dir_path
            if source.exists():
                dest = dirs_backup_dir / dir_path
                shutil.copytree(source, dest, dirs_exist_ok=True)
                logger.info(f"  ‚úÖ R√©pertoire sauvegard√©: {dir_path}")
            else:
                logger.warning(f"  ‚ö†Ô∏è R√©pertoire non trouv√©: {dir_path}")
        
        # 3. Sauvegarder les bases de donn√©es
        db_backup_dir = backup_path / "databases"
        db_backup_dir.mkdir(exist_ok=True)
        
        for db_file in ["trendtrack.db", "trendtrack_test.db"]:
            source_db = self.base_path / "data" / db_file
            if source_db.exists():
                dest_db = db_backup_dir / db_file
                shutil.copy2(source_db, dest_db)
                logger.info(f"  ‚úÖ Base de donn√©es sauvegard√©e: {db_file}")
            else:
                logger.warning(f"  ‚ö†Ô∏è Base de donn√©es non trouv√©e: {db_file}")
        
        # 4. Cr√©er un manifeste de la sauvegarde
        manifest = {
            "backup_name": backup_name,
            "created_at": datetime.datetime.now(timezone.utc).isoformat(),
            "base_path": str(self.base_path),
            "files_backed_up": [f for f in self.critical_files if (self.base_path / f).exists()],
            "directories_backed_up": [d for d in self.critical_dirs if (self.base_path / d).exists()],
            "databases_backed_up": [db for db in ["trendtrack.db", "trendtrack_test.db"] 
                                  if (self.base_path / "data" / db).exists()]
        }
        
        manifest_path = backup_path / "manifest.json"
        with open(manifest_path, 'w') as f:
            json.dump(manifest, f, indent=2)
        
        logger.info(f"‚úÖ Sauvegarde compl√®te cr√©√©e: {backup_path}")
        return str(backup_path)
    
    def list_backups(self) -> List[Dict]:
        """Liste toutes les sauvegardes disponibles"""
        backups = []
        
        for backup_dir in self.backup_dir.iterdir():
            if backup_dir.is_dir():
                manifest_path = backup_dir / "manifest.json"
                if manifest_path.exists():
                    with open(manifest_path, 'r') as f:
                        manifest = json.load(f)
                        backups.append(manifest)
                else:
                    # Sauvegarde sans manifeste (ancienne)
                    backups.append({
                        "backup_name": backup_dir.name,
                        "created_at": "Unknown",
                        "base_path": str(self.base_path),
                        "files_backed_up": [],
                        "directories_backed_up": [],
                        "databases_backed_up": []
                    })
        
        return sorted(backups, key=lambda x: x.get('created_at', ''), reverse=True)
    
    def restore_backup(self, backup_name: str, confirm: bool = False) -> bool:
        """
        Restaure une sauvegarde
        
        Args:
            backup_name: Nom de la sauvegarde √† restaurer
            confirm: Confirmation explicite requise
            
        Returns:
            bool: True si la restauration a r√©ussi
        """
        if not confirm:
            logger.error("‚ùå Confirmation requise pour la restauration")
            return False
        
        backup_path = self.backup_dir / backup_name
        if not backup_path.exists():
            logger.error(f"‚ùå Sauvegarde non trouv√©e: {backup_name}")
            return False
        
        logger.info(f"üîÑ Restauration de la sauvegarde: {backup_name}")
        
        try:
            # 1. Restaurer les fichiers
            files_backup_dir = backup_path / "files"
            if files_backup_dir.exists():
                for file_path in self.critical_files:
                    source = files_backup_dir / file_path
                    if source.exists():
                        dest = self.base_path / file_path
                        dest.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(source, dest)
                        logger.info(f"  ‚úÖ Fichier restaur√©: {file_path}")
            
            # 2. Restaurer les r√©pertoires
            dirs_backup_dir = backup_path / "directories"
            if dirs_backup_dir.exists():
                for dir_path in self.critical_dirs:
                    source = dirs_backup_dir / dir_path
                    if source.exists():
                        dest = self.base_path / dir_path
                        if dest.exists():
                            shutil.rmtree(dest)
                        shutil.copytree(source, dest)
                        logger.info(f"  ‚úÖ R√©pertoire restaur√©: {dir_path}")
            
            # 3. Restaurer les bases de donn√©es
            db_backup_dir = backup_path / "databases"
            if db_backup_dir.exists():
                for db_file in ["trendtrack.db", "trendtrack_test.db"]:
                    source_db = db_backup_dir / db_file
                    if source_db.exists():
                        dest_db = self.base_path / "data" / db_file
                        dest_db.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(source_db, dest_db)
                        logger.info(f"  ‚úÖ Base de donn√©es restaur√©e: {db_file}")
            
            logger.info(f"‚úÖ Restauration compl√®te r√©ussie: {backup_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la restauration: {e}")
            return False
    
    def create_quick_backup(self, operation_name: str) -> str:
        """
        Cr√©e une sauvegarde rapide avant une op√©ration
        
        Args:
            operation_name: Nom de l'op√©ration
            
        Returns:
            str: Nom de la sauvegarde cr√©√©e
        """
        timestamp = datetime.datetime.now(timezone.utc).isoformat()
        backup_name = f"quick_{operation_name}_{timestamp}"
        return self.create_backup(backup_name)
    
    def verify_backup(self, backup_name: str) -> bool:
        """
        V√©rifie l'int√©grit√© d'une sauvegarde
        
        Args:
            backup_name: Nom de la sauvegarde
            
        Returns:
            bool: True si la sauvegarde est valide
        """
        backup_path = self.backup_dir / backup_name
        if not backup_path.exists():
            return False
        
        manifest_path = backup_path / "manifest.json"
        if not manifest_path.exists():
            return False
        
        try:
            with open(manifest_path, 'r') as f:
                manifest = json.load(f)
            
            # V√©rifier que les fichiers existent
            files_backup_dir = backup_path / "files"
            for file_path in manifest.get('files_backed_up', []):
                if not (files_backup_dir / file_path).exists():
                    return False
            
            # V√©rifier que les r√©pertoires existent
            dirs_backup_dir = backup_path / "directories"
            for dir_path in manifest.get('directories_backed_up', []):
                if not (dirs_backup_dir / dir_path).exists():
                    return False
            
            # V√©rifier que les bases de donn√©es existent
            db_backup_dir = backup_path / "databases"
            for db_file in manifest.get('databases_backed_up', []):
                if not (db_backup_dir / db_file).exists():
                    return False
            
            return True
            
        except Exception:
            return False

def main():
    """Fonction principale pour les op√©rations de sauvegarde/restauration"""
    import sys
    
    system = BackupRollbackSystem()
    
    if len(sys.argv) < 2:
        print("Usage: python backup_rollback_system.py <command> [args]")
        print("Commands:")
        print("  create [name]     - Cr√©er une sauvegarde")
        print("  list             - Lister les sauvegardes")
        print("  restore <name>   - Restaurer une sauvegarde")
        print("  verify <name>    - V√©rifier une sauvegarde")
        return
    
    command = sys.argv[1]
    
    if command == "create":
        backup_name = sys.argv[2] if len(sys.argv) > 2 else None
        backup_path = system.create_backup(backup_name)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
    
    elif command == "list":
        backups = system.list_backups()
        print("\nüìã Sauvegardes disponibles:")
        for backup in backups:
            print(f"  - {backup['backup_name']} ({backup['created_at']})")
    
    elif command == "restore":
        if len(sys.argv) < 3:
            print("‚ùå Nom de sauvegarde requis")
            return
        backup_name = sys.argv[2]
        success = system.restore_backup(backup_name, confirm=True)
        if success:
            print(f"‚úÖ Sauvegarde restaur√©e: {backup_name}")
        else:
            print(f"‚ùå √âchec de la restauration: {backup_name}")
    
    elif command == "verify":
        if len(sys.argv) < 3:
            print("‚ùå Nom de sauvegarde requis")
            return
        backup_name = sys.argv[2]
        is_valid = system.verify_backup(backup_name)
        if is_valid:
            print(f"‚úÖ Sauvegarde valide: {backup_name}")
        else:
            print(f"‚ùå Sauvegarde invalide: {backup_name}")
    
    else:
        print(f"‚ùå Commande inconnue: {command}")

if __name__ == "__main__":
    main()

