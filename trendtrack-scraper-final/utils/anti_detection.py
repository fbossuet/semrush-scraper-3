#!/usr/bin/env python3
"""
Syst√®me de pauses al√©atoires et anti-d√©tection pour TrendTrack
Impl√©mente des d√©lais intelligents et des patterns de comportement humain
"""

import asyncio
import random
import logging
import time
from typing import Dict, Any, Optional, List, Tuple
from dataclasses import dataclass
from enum import Enum

# Configuration du logging
logger = logging.getLogger(__name__)

class DelayType(Enum):
    """Types de d√©lais disponibles"""
    SHORT = "short"      # 500ms - 2s
    MEDIUM = "medium"    # 1s - 5s
    LONG = "long"        # 3s - 10s
    VERY_LONG = "very_long"  # 5s - 20s
    CUSTOM = "custom"    # D√©lai personnalis√©

@dataclass
class DelayConfig:
    """Configuration des d√©lais"""
    min_ms: int
    max_ms: int
    description: str

class AntiDetectionSystem:
    """
    Syst√®me d'anti-d√©tection avec pauses al√©atoires et patterns de comportement humain
    """
    
    def __init__(self, stealth_level: str = "medium"):
        self.stealth_level = stealth_level
        self.session_start_time = time.time()
        self.action_count = 0
        self.last_action_time = 0
        
        # Configuration des d√©lais selon le niveau de furtivit√©
        self.delay_configs = {
            "low": {
                DelayType.SHORT: DelayConfig(300, 1000, "D√©lai court"),
                DelayType.MEDIUM: DelayConfig(800, 2000, "D√©lai moyen"),
                DelayType.LONG: DelayConfig(1500, 4000, "D√©lai long"),
                DelayType.VERY_LONG: DelayConfig(3000, 8000, "D√©lai tr√®s long")
            },
            "medium": {
                DelayType.SHORT: DelayConfig(500, 2000, "D√©lai court"),
                DelayType.MEDIUM: DelayConfig(1000, 5000, "D√©lai moyen"),
                DelayType.LONG: DelayConfig(3000, 10000, "D√©lai long"),
                DelayType.VERY_LONG: DelayConfig(5000, 20000, "D√©lai tr√®s long")
            },
            "high": {
                DelayType.SHORT: DelayConfig(1000, 3000, "D√©lai court"),
                DelayType.MEDIUM: DelayConfig(2000, 8000, "D√©lai moyen"),
                DelayType.LONG: DelayConfig(5000, 15000, "D√©lai long"),
                DelayType.VERY_LONG: DelayConfig(10000, 30000, "D√©lai tr√®s long")
            }
        }
        
        # Patterns de comportement humain
        self.human_patterns = {
            "reading_speed": {
                "fast": (100, 300),      # ms par caract√®re
                "normal": (200, 500),    # ms par caract√®re
                "slow": (400, 800)       # ms par caract√®re
            },
            "click_patterns": {
                "immediate": (0, 200),   # Clic imm√©diat
                "hesitation": (500, 1500), # H√©sitation avant clic
                "careful": (1000, 3000)  # Clic r√©fl√©chi
            },
            "typing_speed": {
                "fast": (50, 150),       # ms par caract√®re
                "normal": (100, 300),    # ms par caract√®re
                "slow": (200, 500)       # ms par caract√®re
            }
        }

    async def random_delay(self, delay_type: DelayType = DelayType.MEDIUM, custom_min: int = None, custom_max: int = None) -> float:
        """
        Ajouter un d√©lai al√©atoire bas√© sur le type et le niveau de furtivit√©
        
        Args:
            delay_type: Type de d√©lai √† appliquer
            custom_min: D√©lai minimum personnalis√© (pour DelayType.CUSTOM)
            custom_max: D√©lai maximum personnalis√© (pour DelayType.CUSTOM)
            
        Returns:
            float: D√©lai appliqu√© en secondes
        """
        try:
            # Calculer le d√©lai
            if delay_type == DelayType.CUSTOM:
                if custom_min is None or custom_max is None:
                    raise ValueError("custom_min et custom_max sont requis pour DelayType.CUSTOM")
                min_ms, max_ms = custom_min, custom_max
            else:
                config = self.delay_configs[self.stealth_level][delay_type]
                min_ms, max_ms = config.min_ms, config.max_ms
            
            # Ajouter de la variation bas√©e sur l'heure et l'activit√©
            variation = self._calculate_variation()
            min_ms = int(min_ms * variation)
            max_ms = int(max_ms * variation)
            
            # G√©n√©rer le d√©lai al√©atoire
            delay_ms = random.randint(min_ms, max_ms)
            delay_seconds = delay_ms / 1000
            
            # Log du d√©lai
            logger.info(f"‚è±Ô∏è D√©lai al√©atoire ({delay_type.value}): {delay_ms}ms ({delay_seconds:.2f}s)")
            
            # Appliquer le d√©lai
            await asyncio.sleep(delay_seconds)
            
            # Mettre √† jour les statistiques
            self._update_action_stats()
            
            return delay_seconds
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©lai al√©atoire: {e}")
            # D√©lai de fallback
            await asyncio.sleep(1)
            return 1.0

    def _calculate_variation(self) -> float:
        """
        Calculer la variation du d√©lai bas√©e sur l'heure et l'activit√©
        """
        current_hour = time.localtime().tm_hour
        
        # Variation bas√©e sur l'heure (plus lent la nuit)
        if 22 <= current_hour or current_hour <= 6:
            hour_variation = random.uniform(1.2, 1.8)  # Plus lent la nuit
        elif 9 <= current_hour <= 17:
            hour_variation = random.uniform(0.8, 1.2)  # Plus rapide en journ√©e
        else:
            hour_variation = random.uniform(1.0, 1.4)  # Normal
        
        # Variation bas√©e sur l'activit√© r√©cente
        if self.action_count > 10:
            activity_variation = random.uniform(1.1, 1.5)  # Plus lent si beaucoup d'actions
        elif self.action_count < 3:
            activity_variation = random.uniform(0.9, 1.1)  # Plus rapide si peu d'actions
        else:
            activity_variation = 1.0
        
        return hour_variation * activity_variation

    def _update_action_stats(self):
        """Mettre √† jour les statistiques d'action"""
        self.action_count += 1
        self.last_action_time = time.time()

    async def human_like_typing_delay(self, text: str, speed: str = "normal") -> float:
        """
        Simuler un d√©lai de frappe humaine
        
        Args:
            text: Texte √† taper
            speed: Vitesse de frappe (fast, normal, slow)
            
        Returns:
            float: D√©lai total appliqu√©
        """
        try:
            if speed not in self.human_patterns["typing_speed"]:
                speed = "normal"
            
            min_ms, max_ms = self.human_patterns["typing_speed"][speed]
            total_delay = 0
            
            for char in text:
                # D√©lai par caract√®re
                char_delay = random.randint(min_ms, max_ms) / 1000
                await asyncio.sleep(char_delay)
                total_delay += char_delay
                
                # Pause occasionnelle (simuler la r√©flexion)
                if random.random() < 0.1:  # 10% de chance
                    pause_delay = random.randint(200, 800) / 1000
                    await asyncio.sleep(pause_delay)
                    total_delay += pause_delay
            
            logger.info(f"‚å®Ô∏è D√©lai de frappe simul√©: {total_delay:.2f}s pour {len(text)} caract√®res")
            return total_delay
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©lai de frappe: {e}")
            return 0

    async def human_like_reading_delay(self, text: str, speed: str = "normal") -> float:
        """
        Simuler un d√©lai de lecture humaine
        
        Args:
            text: Texte √† "lire"
            speed: Vitesse de lecture (fast, normal, slow)
            
        Returns:
            float: D√©lai total appliqu√©
        """
        try:
            if speed not in self.human_patterns["reading_speed"]:
                speed = "normal"
            
            min_ms, max_ms = self.human_patterns["reading_speed"][speed]
            
            # Calculer le d√©lai bas√© sur la longueur du texte
            char_count = len(text)
            total_delay_ms = char_count * random.randint(min_ms, max_ms)
            
            # Ajouter des pauses de r√©flexion
            reflection_pauses = char_count // 50  # Une pause tous les 50 caract√®res
            for _ in range(reflection_pauses):
                total_delay_ms += random.randint(500, 2000)
            
            total_delay = total_delay_ms / 1000
            await asyncio.sleep(total_delay)
            
            logger.info(f"üìñ D√©lai de lecture simul√©: {total_delay:.2f}s pour {char_count} caract√®res")
            return total_delay
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©lai de lecture: {e}")
            return 0

    async def human_like_click_delay(self, hesitation: str = "normal") -> float:
        """
        Simuler un d√©lai avant un clic (h√©sitation humaine)
        
        Args:
            hesitation: Niveau d'h√©sitation (immediate, hesitation, careful)
            
        Returns:
            float: D√©lai appliqu√©
        """
        try:
            if hesitation not in self.human_patterns["click_patterns"]:
                hesitation = "normal"
            
            min_ms, max_ms = self.human_patterns["click_patterns"][hesitation]
            delay_ms = random.randint(min_ms, max_ms)
            delay_seconds = delay_ms / 1000
            
            await asyncio.sleep(delay_seconds)
            
            logger.info(f"üñ±Ô∏è D√©lai de clic simul√© ({hesitation}): {delay_ms}ms")
            return delay_seconds
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©lai de clic: {e}")
            return 0

    async def session_break(self, min_duration: int = 30, max_duration: int = 120):
        """
        Prendre une pause de session (simuler une pause humaine)
        
        Args:
            min_duration: Dur√©e minimum de la pause en secondes
            max_duration: Dur√©e maximum de la pause en secondes
        """
        try:
            session_duration = time.time() - self.session_start_time
            
            # Calculer la dur√©e de pause bas√©e sur la dur√©e de session
            if session_duration > 1800:  # Plus de 30 minutes
                pause_duration = random.randint(max_duration, max_duration * 2)
            elif session_duration > 900:  # Plus de 15 minutes
                pause_duration = random.randint(min_duration, max_duration)
            else:
                pause_duration = random.randint(min_duration // 2, min_duration)
            
            logger.info(f"‚òï Pause de session: {pause_duration}s (session: {session_duration:.0f}s)")
            await asyncio.sleep(pause_duration)
            
            # R√©initialiser les statistiques apr√®s la pause
            self.action_count = 0
            self.session_start_time = time.time()
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la pause de session: {e}")

    async def random_mouse_movement(self, page, duration: int = 5):
        """
        Simuler des mouvements de souris al√©atoires
        
        Args:
            page: Page Playwright
            duration: Dur√©e du mouvement en secondes
        """
        try:
            start_time = time.time()
            
            while time.time() - start_time < duration:
                # Position al√©atoire
                x = random.randint(0, 1920)
                y = random.randint(0, 1080)
                
                # Mouvement de souris
                await page.mouse.move(x, y)
                
                # D√©lai al√©atoire entre les mouvements
                await asyncio.sleep(random.uniform(0.5, 2.0))
            
            logger.info(f"üñ±Ô∏è Mouvements de souris simul√©s pendant {duration}s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors des mouvements de souris: {e}")

    async def random_scroll(self, page, direction: str = "down", intensity: int = 3):
        """
        Simuler un d√©filement al√©atoire
        
        Args:
            page: Page Playwright
            direction: Direction du d√©filement (up, down, random)
            intensity: Intensit√© du d√©filement (1-5)
        """
        try:
            scroll_count = random.randint(2, 5) * intensity
            
            for _ in range(scroll_count):
                if direction == "random":
                    scroll_direction = random.choice(["up", "down"])
                else:
                    scroll_direction = direction
                
                # Distance de d√©filement
                scroll_distance = random.randint(100, 500)
                
                if scroll_direction == "down":
                    await page.mouse.wheel(0, scroll_distance)
                else:
                    await page.mouse.wheel(0, -scroll_distance)
                
                # D√©lai entre les d√©filements
                await asyncio.sleep(random.uniform(0.3, 1.0))
            
            logger.info(f"üìú D√©filement simul√©: {scroll_count} mouvements ({direction})")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©filement: {e}")

    def get_session_stats(self) -> Dict[str, Any]:
        """
        Obtenir les statistiques de la session
        
        Returns:
            Dict contenant les statistiques
        """
        session_duration = time.time() - self.session_start_time
        
        return {
            "session_duration": session_duration,
            "action_count": self.action_count,
            "actions_per_minute": (self.action_count / session_duration) * 60 if session_duration > 0 else 0,
            "stealth_level": self.stealth_level,
            "last_action_time": self.last_action_time
        }

# Instance globale pour compatibilit√©
anti_detection = AntiDetectionSystem()

# Fonctions de compatibilit√©
async def random_delay(delay_type: DelayType = DelayType.MEDIUM, stealth_level: str = "medium") -> float:
    """Fonction de compatibilit√© pour les d√©lais al√©atoires"""
    system = AntiDetectionSystem(stealth_level)
    return await system.random_delay(delay_type)

async def human_typing_delay(text: str, speed: str = "normal") -> float:
    """Fonction de compatibilit√© pour les d√©lais de frappe"""
    return await anti_detection.human_like_typing_delay(text, speed)

async def human_reading_delay(text: str, speed: str = "normal") -> float:
    """Fonction de compatibilit√© pour les d√©lais de lecture"""
    return await anti_detection.human_like_reading_delay(text, speed)

async def human_click_delay(hesitation: str = "normal") -> float:
    """Fonction de compatibilit√© pour les d√©lais de clic"""
    return await anti_detection.human_like_click_delay(hesitation)

# Exemple d'utilisation
async def main():
    """Exemple d'utilisation du syst√®me d'anti-d√©tection"""
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    # Cr√©er le syst√®me
    anti_detection = AntiDetectionSystem(stealth_level="high")
    
    # Test des diff√©rents types de d√©lais
    print("üß™ Test des d√©lais al√©atoires...")
    
    await anti_detection.random_delay(DelayType.SHORT)
    await anti_detection.random_delay(DelayType.MEDIUM)
    await anti_detection.random_delay(DelayType.LONG)
    
    # Test des d√©lais de frappe
    print("‚å®Ô∏è Test des d√©lais de frappe...")
    await anti_detection.human_like_typing_delay("Hello World!", "normal")
    
    # Test des d√©lais de lecture
    print("üìñ Test des d√©lais de lecture...")
    await anti_detection.human_like_reading_delay("Ceci est un texte de test pour simuler la lecture humaine.", "normal")
    
    # Test des d√©lais de clic
    print("üñ±Ô∏è Test des d√©lais de clic...")
    await anti_detection.human_like_click_delay("hesitation")
    
    # Afficher les statistiques
    stats = anti_detection.get_session_stats()
    print(f"üìä Statistiques de session: {stats}")

if __name__ == "__main__":
    asyncio.run(main())
