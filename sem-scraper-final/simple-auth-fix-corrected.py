#!/usr/bin/env python3

def add_auth_helper():
    """Ajoute la fonction helper check_and_authenticate"""
    with open('production_scraper.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Trouver la fin de la fonction authenticate_mytoolsplan (ligne 490)
    auth_helper = [
        '\n',
        '    async def check_and_authenticate(self):\n',
        '        """V√©rifie si l\'utilisateur est authentifi√© et s\'authentifie si n√©cessaire"""\n',
        '        try:\n',
        '            current_url = self.page.url\n',
        '            \n',
        '            # V√©rifier l\'URL ET le contenu de la page\n',
        '            login_redirected = False\n',
        '            \n',
        '            # 1. V√©rifier l\'URL\n',
        '            if "app.mytoolsplan.com" in current_url and "login" in current_url:\n',
        '                login_redirected = True\n',
        '                logger.info("   üîê Redirection vers login d√©tect√©e (URL)")\n',
        '            \n',
        '            # 2. V√©rifier le contenu de la page pour le message de login\n',
        '            try:\n',
        '                page_content = await self.page.content()\n',
        '                if "If you are a registered member, please login" in page_content:\n',
        '                    login_redirected = True\n',
        '                    logger.info("   üîê Message de login d√©tect√© dans le contenu de la page")\n',
        '                elif "please login" in page_content.lower() and "registered member" in page_content.lower():\n',
        '                    login_redirected = True\n',
        '                    logger.info("   üîê Message de login d√©tect√© (variante)")\n',
        '            except Exception as e:\n',
        '                logger.warning(f"   ‚ö†Ô∏è Erreur lors de la v√©rification du contenu: {e}")\n',
        '            \n',
        '            if login_redirected:\n',
        '                logger.info("   üîê Authentification n√©cessaire, authentification...")\n',
        '                await self.page.goto("https://app.mytoolsplan.com/login", wait_until=\'domcontentloaded\', timeout=30000)\n',
        '                \n',
        '                await self.page.wait_for_selector(\'input[name="amember_login"]\', timeout=15000)\n',
        '                await self.page.wait_for_selector(\'input[name="amember_pass"]\', timeout=15000)\n',
        '                \n',
        '                await self.page.fill(\'input[name="amember_login"]\', config.config.MYTOOLSPLAN_USERNAME)\n',
        '                await self.page.fill(\'input[name="amember_pass"]\', config.config.MYTOOLSPLAN_PASSWORD)\n',
        '                await self.page.click(\'input[type="submit"]\')\n',
        '                \n',
        '                await self.page.wait_for_url("**/member", timeout=15000)\n',
        '                logger.info("   ‚úÖ Authentification r√©ussie")\n',
        '                return True\n',
        '            \n',
        '            return False\n',
        '            \n',
        '        except Exception as e:\n',
        '            logger.error(f"‚ùå Erreur lors de la v√©rification d\'authentification: {e}")\n',
        '            return False\n',
        '\n'
    ]
    
    # Ins√©rer apr√®s la ligne 490
    lines[490:490] = auth_helper
    
    # √âcrire le fichier
    with open('production_scraper.py', 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    print("‚úÖ Fonction helper ajout√©e")
    return len(auth_helper)  # Retourner le nombre de lignes ajout√©es

def add_auth_calls(lines_added):
    """Ajoute les appels √† check_and_authenticate dans les fonctions de scraping"""
    with open('production_scraper.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Trouver les lignes o√π ajouter les appels
    # Ligne 1179: d√©but de scrape_visits
    # Ligne 1195: d√©but de scrape_purchase_conversion (apr√®s l'ajout de la fonction helper)
    
    # Ajouter dans scrape_visits (ligne 1179)
    auth_call = [
        '                # V√©rifier l\'authentification avant de scraper\n',
        '                await self.check_and_authenticate()\n',
        '\n'
    ]
    
    # Calculer la nouvelle ligne apr√®s l'ajout de la fonction helper
    new_line_1179 = 1179 + lines_added - 1  # -1 car on compte √† partir de 0
    
    lines[new_line_1179:new_line_1179] = auth_call
    
    # Ajouter dans scrape_purchase_conversion
    new_line_1195 = 1195 + lines_added - 1 + len(auth_call) - 1
    
    lines[new_line_1195:new_line_1195] = auth_call
    
    # √âcrire le fichier
    with open('production_scraper.py', 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    print("‚úÖ Appels √† check_and_authenticate ajout√©s")
    return True

def verify_syntax():
    """V√©rifie la syntaxe Python"""
    try:
        import ast
        with open('production_scraper.py', 'r', encoding='utf-8') as f:
            content = f.read()
        ast.parse(content)
        print("‚úÖ Syntaxe Python v√©rifi√©e - OK")
        return True
    except SyntaxError as e:
        print(f"‚ùå Erreur de syntaxe: {e}")
        return False

def verify_changes():
    """V√©rifie que les changements ont √©t√© appliqu√©s"""
    with open('production_scraper.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier que la fonction helper a √©t√© ajout√©e
    if 'async def check_and_authenticate(self):' in content:
        print("‚úÖ Fonction helper check_and_authenticate trouv√©e")
    else:
        print("‚ùå Fonction helper check_and_authenticate non trouv√©e")
        return False
    
    # V√©rifier que les appels ont √©t√© ajout√©s
    if 'await self.check_and_authenticate()' in content:
        print("‚úÖ Appels √† check_and_authenticate trouv√©s")
    else:
        print("‚ùå Appels √† check_and_authenticate non trouv√©s")
        return False
    
    return True

if __name__ == "__main__":
    print("üîß Ajout de la fonction helper check_and_authenticate...")
    
    lines_added = add_auth_helper()
    if lines_added and add_auth_calls(lines_added) and verify_syntax() and verify_changes():
        print("‚úÖ Modification termin√©e avec succ√®s")
    else:
        print("‚ùå √âchec de la modification")
