#!/usr/bin/env python3
"""
Script pour supprimer les m√©triques Paid Search Traffic et Organic Search Traffic pour spanx.com
"""

from trendtrack_api import TrendTrackAPI

def main():
    api = TrendTrackAPI()
    
    # R√©cup√©rer tous les shops et trouver spanx.com
    shops = api.get_all_shops()
    shop = None
    for s in shops:
        if s.get('shop_name') == 'spanx.com':
            shop = s
            break
    
    if not shop:
        print("‚ùå Shop spanx.com non trouv√©")
        return
    
    print(f"‚úÖ Shop trouv√©: ID {shop['id']}")
    
    # R√©cup√©rer les analytics actuels
    analytics = api.get_shop_analytics(shop['id'])
    if not analytics:
        print("‚ùå Aucune donn√©e analytics trouv√©e")
        return
    
    print(f"üìä Valeurs actuelles:")
    print(f"   Organic Search Traffic: {analytics.get('organic_search_traffic', 'N/A')}")
    print(f"   Paid Search Traffic: {analytics.get('paid_search_traffic', 'N/A')}")
    
    # Mettre √† jour en supprimant ces m√©triques (mettre √† None)
    update_data = {
        'organic_search_traffic': None,
        'paid_search_traffic': None
    }
    
    # Mettre √† jour la base de donn√©es
    success = api.update_shop_analytics(shop['id'], update_data)
    
    if success:
        print("‚úÖ M√©triques supprim√©es avec succ√®s")
        
        # V√©rifier la mise √† jour
        updated_analytics = api.get_shop_analytics(shop['id'])
        print(f"üìä Nouvelles valeurs:")
        print(f"   Organic Search Traffic: {updated_analytics.get('organic_search_traffic', 'N/A')}")
        print(f"   Paid Search Traffic: {updated_analytics.get('paid_search_traffic', 'N/A')}")
    else:
        print("‚ùå Erreur lors de la suppression des m√©triques")

if __name__ == "__main__":
    main()
