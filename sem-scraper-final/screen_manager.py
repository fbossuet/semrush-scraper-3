#!/usr/bin/env python3
"""
Gestionnaire de sessions screen pour les workers parall√®les
Permet de voir, d√©marrer et arr√™ter les sessions screen
"""

import logging
import os
import subprocess
import sys
import time
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Optional

# Configuration du logging
logger = logging.getLogger(__name__)

def setup_logging():
    """Configure le logging"""
    logger = logging.getLogger()
    logger.handlers.clear()
    
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    
    logger.addHandler(console_handler)
    logger.setLevel(logging.INFO)

class ScreenManager:
    """Gestionnaire de sessions screen"""
    
    def __init__(self):
        self.screen_sessions = {}
        self.worker_sessions = [
            "workers-parallel",
            "api-server", 
            "dashboard",
            "monitor-workers"
        ]
    
    def clear_screen(self):
        """Efface l'√©cran"""
        os.system('clear' if os.name == 'posix' else 'cls')
    
    def print_banner(self):
        """Affiche la banni√®re"""
        print("=" * 70)
        print("üñ•Ô∏è GESTIONNAIRE DE SESSIONS SCREEN - TRENDTRACK")
        print("=" * 70)
        print(f"üïí {datetime.now(timezone.utc).isoformat()}")
        print("=" * 70)
    
    def print_main_menu(self):
        """Affiche le menu principal"""
        print("\nüìã MENU PRINCIPAL:")
        print("1. üëÅÔ∏è Voir les sessions actives")
        print("2. üöÄ D√©marrer une session")
        print("3. üõë Arr√™ter une session")
        print("4. üîÑ Red√©marrer une session")
        print("5. üßπ Nettoyer toutes les sessions")
        print("6. üìä Statistiques des sessions")
        print("7. üìù Voir les logs d'une session")
        print("8. üìñ Aide")
        print("9. üëã Quitter")
        print("-" * 50)
    
    def get_user_choice(self, min_choice: int = 1, max_choice: int = 9) -> int:
        """R√©cup√®re le choix de l'utilisateur"""
        while True:
            try:
                choice = input(f"\nVotre choix ({min_choice}-{max_choice}): ").strip()
                if choice.isdigit():
                    choice = int(choice)
                    if min_choice <= choice <= max_choice:
                        return choice
                print(f"‚ùå Choix invalide, veuillez choisir entre {min_choice} et {max_choice}")
            except KeyboardInterrupt:
                print("\nüëã Au revoir!")
                return 9
    
    def get_screen_sessions(self) -> List[Dict]:
        """R√©cup√®re la liste des sessions screen actives"""
        try:
            result = subprocess.run(['screen', '-ls'], capture_output=True, text=True)
            if result.returncode != 0:
                return []
            
            sessions = []
            lines = result.stdout.strip().split('\n')
            
            for line in lines:
                if '.screen' in line or 'Detached' in line or 'Attached' in line:
                    parts = line.strip().split('\t')
                    if len(parts) >= 2:
                        session_id = parts[0].split('.')[0] if '.' in parts[0] else parts[0]
                        session_name = parts[0].split('.')[1] if '.' in parts[0] else 'unnamed'
                        status = parts[1].strip('()')
                        
                        sessions.append({
                            'id': session_id,
                            'name': session_name,
                            'status': status,
                            'full_name': parts[0]
                        })
            
            return sessions
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration sessions: {e}")
            return []
    
    def show_active_sessions(self):
        """Affiche les sessions actives"""
        try:
            print("\nüëÅÔ∏è SESSIONS SCREEN ACTIVES:")
            print("-" * 50)
            
            sessions = self.get_screen_sessions()
            
            if not sessions:
                print("‚ÑπÔ∏è Aucune session screen active")
                return
            
            print(f"{'ID':<8} {'Nom':<20} {'Statut':<12} {'Actions'}")
            print("-" * 50)
            
            for session in sessions:
                status_icon = "üü¢" if session['status'] == 'Attached' else "üü°"
                print(f"{session['id']:<8} {session['name']:<20} {status_icon} {session['status']:<10}")
            
            print(f"\nüìä Total: {len(sessions)} session(s)")
            
        except Exception as e:
            print(f"‚ùå Erreur affichage sessions: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def start_session_menu(self):
        """Menu pour d√©marrer une session"""
        print("\nüöÄ D√âMARRER UNE SESSION:")
        print("1. üè≠ Workers parall√®les")
        print("2. üåê API Server")
        print("3. üìä Dashboard")
        print("4. üëÅÔ∏è Monitor Workers")
        print("5. üîô Retour")
        
        choice = self.get_user_choice(1, 5)
        
        if choice == 5:
            return
        
        session_configs = {
            1: {
                'name': 'workers-parallel',
                'command': 'python3 menu_workers.py',
                'description': 'Workers parall√®les'
            },
            2: {
                'name': 'api-server',
                'command': 'python3 api_server.py',
                'description': 'API Server'
            },
            3: {
                'name': 'dashboard',
                'command': 'python3 dashboard.py',
                'description': 'Dashboard'
            },
            4: {
                'name': 'monitor-workers',
                'command': 'python3 monitor_parallel_workers.py',
                'description': 'Monitor Workers'
            }
        }
        
        config = session_configs[choice]
        
        # V√©rifier si la session existe d√©j√†
        sessions = self.get_screen_sessions()
        existing_session = next((s for s in sessions if s['name'] == config['name']), None)
        
        if existing_session:
            print(f"‚ö†Ô∏è Session '{config['name']}' existe d√©j√† (ID: {existing_session['id']})")
            restart = input("Voulez-vous la red√©marrer? (o/N): ").strip().lower()
            if restart in ['o', 'oui', 'y', 'yes']:
                self.stop_session_by_name(config['name'])
            else:
                return
        
        # D√©marrer la session
        try:
            print(f"üöÄ D√©marrage de la session '{config['description']}'...")
            
            # Cr√©er la commande screen
            screen_cmd = [
                'screen', '-dmS', config['name'], 
                'bash', '-c', f'cd /home/ubuntu/sem-scraper-final && {config["command"]}'
            ]
            
            result = subprocess.run(screen_cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ Session '{config['description']}' d√©marr√©e avec succ√®s")
                
                # Attendre un peu et v√©rifier
                time.sleep(2)
                sessions = self.get_screen_sessions()
                new_session = next((s for s in sessions if s['name'] == config['name']), None)
                
                if new_session:
                    print(f"üìã ID de session: {new_session['id']}")
                    print(f"üìã Statut: {new_session['status']}")
                else:
                    print("‚ö†Ô∏è Session d√©marr√©e mais non visible dans la liste")
            else:
                print(f"‚ùå Erreur d√©marrage session: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage session: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def stop_session_menu(self):
        """Menu pour arr√™ter une session"""
        print("\nüõë ARR√äTER UNE SESSION:")
        
        sessions = self.get_screen_sessions()
        
        if not sessions:
            print("‚ÑπÔ∏è Aucune session active √† arr√™ter")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        print("\nSessions disponibles:")
        for i, session in enumerate(sessions, 1):
            status_icon = "üü¢" if session['status'] == 'Attached' else "üü°"
            print(f"{i}. {status_icon} {session['name']} (ID: {session['id']}, {session['status']})")
        
        print(f"{len(sessions) + 1}. üîô Retour")
        
        choice = self.get_user_choice(1, len(sessions) + 1)
        
        if choice == len(sessions) + 1:
            return
        
        session = sessions[choice - 1]
        
        # Confirmation
        confirm = input(f"\n‚ö†Ô∏è Arr√™ter la session '{session['name']}'? (o/N): ").strip().lower()
        if confirm not in ['o', 'oui', 'y', 'yes']:
            print("‚ùå Annul√©")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        # Arr√™ter la session
        try:
            print(f"üõë Arr√™t de la session '{session['name']}'...")
            
            # Envoyer Ctrl+C √† la session
            subprocess.run(['screen', '-S', session['full_name'], '-X', 'stuff', '^C'], 
                         capture_output=True, text=True)
            
            time.sleep(2)
            
            # Tuer la session
            subprocess.run(['screen', '-S', session['full_name'], '-X', 'quit'], 
                         capture_output=True, text=True)
            
            print(f"‚úÖ Session '{session['name']}' arr√™t√©e")
            
        except Exception as e:
            print(f"‚ùå Erreur arr√™t session: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def stop_session_by_name(self, session_name: str):
        """Arr√™te une session par son nom"""
        try:
            sessions = self.get_screen_sessions()
            session = next((s for s in sessions if s['name'] == session_name), None)
            
            if not session:
                return False
            
            # Envoyer Ctrl+C puis quitter
            subprocess.run(['screen', '-S', session['full_name'], '-X', 'stuff', '^C'], 
                         capture_output=True, text=True)
            time.sleep(2)
            subprocess.run(['screen', '-S', session['full_name'], '-X', 'quit'], 
                         capture_output=True, text=True)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t session {session_name}: {e}")
            return False
    
    def restart_session_menu(self):
        """Menu pour red√©marrer une session"""
        print("\nüîÑ RED√âMARRER UNE SESSION:")
        
        sessions = self.get_screen_sessions()
        
        if not sessions:
            print("‚ÑπÔ∏è Aucune session active √† red√©marrer")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        print("\nSessions disponibles:")
        for i, session in enumerate(sessions, 1):
            status_icon = "üü¢" if session['status'] == 'Attached' else "üü°"
            print(f"{i}. {status_icon} {session['name']} (ID: {session['id']}, {session['status']})")
        
        print(f"{len(sessions) + 1}. üîô Retour")
        
        choice = self.get_user_choice(1, len(sessions) + 1)
        
        if choice == len(sessions) + 1:
            return
        
        session = sessions[choice - 1]
        
        # Confirmation
        confirm = input(f"\n‚ö†Ô∏è Red√©marrer la session '{session['name']}'? (o/N): ").strip().lower()
        if confirm not in ['o', 'oui', 'y', 'yes']:
            print("‚ùå Annul√©")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        # Red√©marrer la session
        try:
            print(f"üîÑ Red√©marrage de la session '{session['name']}'...")
            
            # Arr√™ter d'abord
            self.stop_session_by_name(session['name'])
            time.sleep(3)
            
            # Red√©marrer selon le type
            session_configs = {
                'workers-parallel': 'python3 menu_workers.py',
                'api-server': 'python3 api_server.py',
                'dashboard': 'python3 dashboard.py',
                'monitor-workers': 'python3 monitor_parallel_workers.py'
            }
            
            if session['name'] in session_configs:
                command = session_configs[session['name']]
                screen_cmd = [
                    'screen', '-dmS', session['name'], 
                    'bash', '-c', f'cd /home/ubuntu/sem-scraper-final && {command}'
                ]
                
                result = subprocess.run(screen_cmd, capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"‚úÖ Session '{session['name']}' red√©marr√©e avec succ√®s")
                else:
                    print(f"‚ùå Erreur red√©marrage: {result.stderr}")
            else:
                print(f"‚ö†Ô∏è Configuration inconnue pour '{session['name']}'")
                
        except Exception as e:
            print(f"‚ùå Erreur red√©marrage session: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def clean_all_sessions(self):
        """Nettoie toutes les sessions"""
        print("\nüßπ NETTOYAGE DE TOUTES LES SESSIONS:")
        
        sessions = self.get_screen_sessions()
        
        if not sessions:
            print("‚ÑπÔ∏è Aucune session √† nettoyer")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        print(f"üìã {len(sessions)} session(s) trouv√©e(s):")
        for session in sessions:
            print(f"  - {session['name']} (ID: {session['id']}, {session['status']})")
        
        confirm = input(f"\n‚ö†Ô∏è Arr√™ter TOUTES les sessions? (o/N): ").strip().lower()
        if confirm not in ['o', 'oui', 'y', 'yes']:
            print("‚ùå Annul√©")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        # Arr√™ter toutes les sessions
        stopped_count = 0
        for session in sessions:
            try:
                print(f"üõë Arr√™t de '{session['name']}'...")
                if self.stop_session_by_name(session['name']):
                    stopped_count += 1
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå Erreur arr√™t '{session['name']}': {e}")
        
        print(f"\n‚úÖ {stopped_count}/{len(sessions)} session(s) arr√™t√©e(s)")
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def show_session_stats(self):
        """Affiche les statistiques des sessions"""
        try:
            print("\nüìä STATISTIQUES DES SESSIONS:")
            print("-" * 50)
            
            sessions = self.get_screen_sessions()
            
            if not sessions:
                print("‚ÑπÔ∏è Aucune session active")
                return
            
            # Compter par statut
            attached_count = len([s for s in sessions if s['status'] == 'Attached'])
            detached_count = len([s for s in sessions if s['status'] == 'Detached'])
            
            print(f"üìà Total sessions: {len(sessions)}")
            print(f"üü¢ Attach√©es: {attached_count}")
            print(f"üü° D√©tach√©es: {detached_count}")
            
            # D√©tails par session
            print(f"\nüìã D√âTAILS:")
            for session in sessions:
                status_icon = "üü¢" if session['status'] == 'Attached' else "üü°"
                print(f"  {status_icon} {session['name']} - ID: {session['id']} - {session['status']}")
            
        except Exception as e:
            print(f"‚ùå Erreur statistiques: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def show_session_logs(self):
        """Affiche les logs d'une session"""
        print("\nüìù LOGS D'UNE SESSION:")
        
        sessions = self.get_screen_sessions()
        
        if not sessions:
            print("‚ÑπÔ∏è Aucune session active")
            input("\nAppuyez sur Entr√©e pour continuer...")
            return
        
        print("\nSessions disponibles:")
        for i, session in enumerate(sessions, 1):
            status_icon = "üü¢" if session['status'] == 'Attached' else "üü°"
            print(f"{i}. {status_icon} {session['name']} (ID: {session['id']})")
        
        print(f"{len(sessions) + 1}. üîô Retour")
        
        choice = self.get_user_choice(1, len(sessions) + 1)
        
        if choice == len(sessions) + 1:
            return
        
        session = sessions[choice - 1]
        
        try:
            print(f"\nüìù Logs de la session '{session['name']}':")
            print("-" * 50)
            
            # Afficher les derni√®res lignes de la session
            result = subprocess.run([
                'screen', '-S', session['full_name'], '-X', 'hardcopy', '/tmp/screen_log.txt'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                # Lire le fichier de log
                try:
                    with open('/tmp/screen_log.txt', 'r') as f:
                        lines = f.readlines()
                        # Afficher les 20 derni√®res lignes
                        for line in lines[-20:]:
                            print(line.rstrip())
                except FileNotFoundError:
                    print("‚ÑπÔ∏è Aucun log disponible")
            else:
                print("‚ùå Erreur r√©cup√©ration logs")
                
        except Exception as e:
            print(f"‚ùå Erreur logs: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def show_help(self):
        """Affiche l'aide"""
        print("\nüìñ AIDE - GESTIONNAIRE DE SESSIONS SCREEN")
        print("=" * 60)
        print("üéØ OBJECTIF:")
        print("   G√©rer les sessions screen pour les workers parall√®les")
        print()
        print("üìã FONCTIONNALIT√âS:")
        print("   1. üëÅÔ∏è Voir les sessions - Liste toutes les sessions actives")
        print("   2. üöÄ D√©marrer - Lance une nouvelle session screen")
        print("   3. üõë Arr√™ter - Arr√™te une session sp√©cifique")
        print("   4. üîÑ Red√©marrer - Red√©marre une session existante")
        print("   5. üßπ Nettoyer - Arr√™te toutes les sessions")
        print("   6. üìä Statistiques - Affiche les stats des sessions")
        print("   7. üìù Logs - Affiche les logs d'une session")
        print()
        print("üñ•Ô∏è SESSIONS DISPONIBLES:")
        print("   üè≠ workers-parallel - Menu des workers parall√®les")
        print("   üåê api-server - Serveur API")
        print("   üìä dashboard - Tableau de bord")
        print("   üëÅÔ∏è monitor-workers - Monitoring des workers")
        print()
        print("üí° CONSEILS:")
        print("   - Utilisez 'workers-parallel' pour lancer les workers")
        print("   - Les sessions 'Detached' tournent en arri√®re-plan")
        print("   - Utilisez 'screen -r <nom>' pour vous connecter √† une session")
        print("   - Ctrl+A puis D pour d√©tacher une session")
        print("   - Ctrl+C pour arr√™ter un processus dans une session")
        print("=" * 60)
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def run_menu(self):
        """Lance le menu principal"""
        while True:
            try:
                self.clear_screen()
                self.print_banner()
                self.print_main_menu()
                
                choice = self.get_user_choice()
                
                if choice == 1:  # Voir les sessions
                    self.show_active_sessions()
                
                elif choice == 2:  # D√©marrer une session
                    self.start_session_menu()
                
                elif choice == 3:  # Arr√™ter une session
                    self.stop_session_menu()
                
                elif choice == 4:  # Red√©marrer une session
                    self.restart_session_menu()
                
                elif choice == 5:  # Nettoyer toutes les sessions
                    self.clean_all_sessions()
                
                elif choice == 6:  # Statistiques
                    self.show_session_stats()
                
                elif choice == 7:  # Logs
                    self.show_session_logs()
                
                elif choice == 8:  # Aide
                    self.show_help()
                
                elif choice == 9:  # Quitter
                    print("\nüëã Au revoir!")
                    break
                
            except KeyboardInterrupt:
                print("\nüëã Au revoir!")
                break
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
                input("\nAppuyez sur Entr√©e pour continuer...")

def main():
    """Fonction principale"""
    setup_logging()
    
    try:
        manager = ScreenManager()
        manager.run_menu()
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
