#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour le syst√®me de workers parall√®les
Interface simple pour d√©marrer, arr√™ter et surveiller les workers
"""

import asyncio
import os
import sys
import time
from pathlib import Path

def print_banner():
    """Affiche la banni√®re du syst√®me"""
    print("=" * 80)
    print("üè≠ SYST√àME DE WORKERS PARALL√àLES - D√âMARRAGE RAPIDE")
    print("=" * 80)
    print("üéØ Scraping MyToolsPlan avec 2 workers en parall√®le")
    print("üîí Session partag√©e + M√™me IP + R√©partition √©quitable")
    print("=" * 80)

def check_requirements():
    """V√©rifie les pr√©requis"""
    print("üîç V√©rification des pr√©requis...")
    
    # V√©rifier les fichiers n√©cessaires
    required_files = [
        "production_scraper_parallel.py",
        "launch_parallel_workers.py",
        "monitor_parallel_workers.py",
        "test_parallel_system.py"
    ]
    
    missing_files = []
    for file_name in required_files:
        if not Path(file_name).exists():
            missing_files.append(file_name)
    
    if missing_files:
        print(f"‚ùå Fichiers manquants: {', '.join(missing_files)}")
        return False
    
    # V√©rifier les r√©pertoires
    required_dirs = ["logs", "locks", "results"]
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            print(f"üìÅ Cr√©ation du r√©pertoire: {dir_name}")
            dir_path.mkdir(exist_ok=True)
    
    print("‚úÖ Pr√©requis v√©rifi√©s")
    return True

def run_tests():
    """Lance les tests du syst√®me"""
    print("\nüß™ Lancement des tests du syst√®me...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "test_parallel_system.py"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Tests r√©ussis - Le syst√®me est pr√™t")
            return True
        else:
            print("‚ùå Tests √©chou√©s:")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

def start_workers():
    """D√©marre les workers"""
    print("\nüöÄ D√©marrage des workers...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "launch_parallel_workers.py", "start"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Workers d√©marr√©s avec succ√®s")
            return True
        else:
            print("‚ùå Erreur lors du d√©marrage:")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def stop_workers():
    """Arr√™te les workers"""
    print("\nüõë Arr√™t des workers...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "launch_parallel_workers.py", "stop"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Workers arr√™t√©s")
            return True
        else:
            print("‚ùå Erreur lors de l'arr√™t:")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def show_status():
    """Affiche le statut des workers"""
    print("\nüìä Statut des workers...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, "launch_parallel_workers.py", "status"], 
                              capture_output=True, text=True)
        
        print(result.stdout)
        if result.stderr:
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def start_monitoring():
    """Lance le monitoring"""
    print("\nüëÅÔ∏è Lancement du monitoring...")
    print("üí° Appuyez sur Ctrl+C pour quitter le monitoring")
    
    try:
        import subprocess
        subprocess.run([sys.executable, "monitor_parallel_workers.py"])
        
    except KeyboardInterrupt:
        print("\nüëã Monitoring arr√™t√©")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def main_menu():
    """Menu principal interactif"""
    while True:
        print("\n" + "=" * 50)
        print("üéÆ MENU PRINCIPAL")
        print("=" * 50)
        print("1. üß™ Tester le syst√®me")
        print("2. üöÄ D√©marrer les workers")
        print("3. üõë Arr√™ter les workers")
        print("4. üìä Afficher le statut")
        print("5. üëÅÔ∏è Monitoring en temps r√©el")
        print("6. üîÑ Red√©marrer les workers")
        print("7. üìñ Afficher l'aide")
        print("8. üëã Quitter")
        print("=" * 50)
        
        try:
            choice = input("Votre choix (1-8): ").strip()
            
            if choice == "1":
                if run_tests():
                    print("‚úÖ Syst√®me pr√™t √† √™tre utilis√©")
                else:
                    print("‚ùå Veuillez corriger les erreurs avant de continuer")
            
            elif choice == "2":
                if start_workers():
                    print("‚úÖ Workers d√©marr√©s - Vous pouvez maintenant surveiller avec l'option 5")
                else:
                    print("‚ùå √âchec du d√©marrage")
            
            elif choice == "3":
                if stop_workers():
                    print("‚úÖ Workers arr√™t√©s")
                else:
                    print("‚ùå √âchec de l'arr√™t")
            
            elif choice == "4":
                show_status()
            
            elif choice == "5":
                start_monitoring()
            
            elif choice == "6":
                print("üîÑ Red√©marrage des workers...")
                if stop_workers():
                    time.sleep(2)
                    if start_workers():
                        print("‚úÖ Workers red√©marr√©s")
                    else:
                        print("‚ùå √âchec du red√©marrage")
                else:
                    print("‚ùå √âchec de l'arr√™t")
            
            elif choice == "7":
                show_help()
            
            elif choice == "8":
                print("üëã Au revoir!")
                break
            
            else:
                print("‚ùå Choix invalide, veuillez choisir entre 1 et 8")
                
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

def show_help():
    """Affiche l'aide"""
    print("\n" + "=" * 60)
    print("üìñ AIDE - SYST√àME DE WORKERS PARALL√àLES")
    print("=" * 60)
    print("üéØ OBJECTIF:")
    print("   Scraper MyToolsPlan avec 2 workers en parall√®le")
    print("   Session partag√©e + M√™me IP + R√©partition √©quitable")
    print()
    print("üöÄ WORKFLOW RECOMMAND√â:")
    print("   1. Tester le syst√®me (option 1)")
    print("   2. D√©marrer les workers (option 2)")
    print("   3. Surveiller en temps r√©el (option 5)")
    print("   4. Arr√™ter quand termin√© (option 3)")
    print()
    print("üìä MONITORING:")
    print("   - Statut des workers (running/stopped)")
    print("   - Utilisation CPU et m√©moire")
    print("   - Boutiques trait√©es et erreurs")
    print("   - Logs en temps r√©el")
    print()
    print("üîß D√âPANNAGE:")
    print("   - V√©rifiez les logs dans logs/")
    print("   - Red√©marrez si n√©cessaire (option 6)")
    print("   - Testez le syst√®me (option 1)")
    print()
    print("üìÅ FICHIERS:")
    print("   - logs/ : Logs des workers")
    print("   - locks/ : Fichiers de locks")
    print("   - results/ : R√©sultats du scraping")
    print("=" * 60)

def main():
    """Fonction principale"""
    print_banner()
    
    # V√©rifier les pr√©requis
    if not check_requirements():
        print("‚ùå Pr√©requis non satisfaits")
        return
    
    # V√©rifier les arguments de ligne de commande
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "test":
            run_tests()
        elif command == "start":
            start_workers()
        elif command == "stop":
            stop_workers()
        elif command == "status":
            show_status()
        elif command == "monitor":
            start_monitoring()
        elif command == "restart":
            stop_workers()
            time.sleep(2)
            start_workers()
        elif command == "help":
            show_help()
        else:
            print(f"‚ùå Commande inconnue: {command}")
            print("üí° Commandes disponibles: test, start, stop, status, monitor, restart, help")
    else:
        # Mode interactif
        main_menu()

if __name__ == "__main__":
    main()
